<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>宗安的个人博客</title>
  
  <subtitle>千里之行，始于足下</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zongan.live/"/>
  <updated>2018-08-20T06:04:06.105Z</updated>
  <id>http://zongan.live/</id>
  
  <author>
    <name>Zong An</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://zongan.live/2018/08/17/shell/"/>
    <id>http://zongan.live/2018/08/17/shell/</id>
    <published>2018-08-17T14:44:10.597Z</published>
    <updated>2018-08-20T06:04:06.105Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.runoob.com/linux/linux-shell.html" target="_blank" rel="noopener">基础知识</a></p><h1 id="shell标识"><a href="#shell标识" class="headerlink" title="shell标识"></a>shell标识</h1><p><code>#!/bin/bash</code><br><code>#!</code>告诉系统用后面指定路径中的程序来解释此脚本文件</p><h1 id="运行方法"><a href="#运行方法" class="headerlink" title="运行方法"></a>运行方法</h1><ol><li><p>作为可执行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./test.sh</span><br><span class="line">./test.sh</span><br></pre></td></tr></table></figure></li><li><p>作为解释器参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash test.sh</span><br></pre></td></tr></table></figure></li></ol><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="只读变量-不可修改"><a href="#只读变量-不可修改" class="headerlink" title="只读变量,不可修改"></a>只读变量,不可修改</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url='http://www.baidu.com'</span><br><span class="line">readonly url</span><br></pre></td></tr></table></figure><h2 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset variable_name</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name="zong"</span><br><span class="line">echo "name:$&#123;name&#125;"</span><br><span class="line">echo "len:$&#123;#name&#125;"</span><br><span class="line">echo "substr:$&#123;name:1:3&#125;"</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;EOF</span><br><span class="line">注释内容...</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h1 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">echo 'shell 传递参数实例：'</span><br><span class="line">echo "执行文件名:$0"</span><br><span class="line">echo "第一个参数:$1" </span><br><span class="line">echo "第一个参数:$2"  </span><br><span class="line">echo "第一个参数:$3" </span><br><span class="line">echo "共$#个参数"</span><br><span class="line">echo "所有参数:$*"</span><br><span class="line">echo "所有参数:$@"</span><br><span class="line">echo "脚本运行的当前进程ID:$$"</span><br><span class="line">echo "后台运行的最后一个进程的ID号:$!"</span><br><span class="line">echo "显示shell使用的当前选项:$-"</span><br><span class="line">echo "最后命令的退出状态码:$?"</span><br><span class="line"></span><br><span class="line">echo '$*和$@的区别:'</span><br><span class="line">echo '$*:'</span><br><span class="line">for i in "$*";</span><br><span class="line">do</span><br><span class="line">    echo $&#123;i&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo '$@:'</span><br><span class="line">for i in "$@";</span><br><span class="line">do </span><br><span class="line">    echo $&#123;i&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array=(val1 val2 val3 ...)</span><br></pre></td></tr></table></figure><p>单独定义数组的各个分量：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array[2]=val2</span><br></pre></td></tr></table></figure></p><p>读取数组<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>&#123;array[1]&#125;</span><br></pre></td></tr></table></figure></p><p>获取数组长度<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>&#123;#array[*]&#125; </span><br><span class="line">or</span><br><span class="line"><span class="meta">$</span>&#123;#array[@]&#125;</span><br></pre></td></tr></table></figure></p><h1 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h1><p><code>expr</code>和<code>awk</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 算术运算符</span><br><span class="line">val=`expr 2 + 2`</span><br><span class="line">echo $val</span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line">echo "a:$a"</span><br><span class="line">echo "b:$b"</span><br><span class="line">val=`expr $a + $b`</span><br><span class="line">echo "a + b = $val"</span><br><span class="line">val=`expr $a - $b`</span><br><span class="line">echo "a - b = $val"</span><br><span class="line">val=`expr $a \* $b` # 乘法，*号前必须加斜杠</span><br><span class="line">echo "a * b = $val"</span><br><span class="line">val=`expr $b / $a`</span><br><span class="line">echo "b / a = $val"</span><br><span class="line">val=`expr $a % $b`</span><br><span class="line">echo "a % b = $val"</span><br><span class="line"></span><br><span class="line">if [ $a == $b ]</span><br><span class="line">then</span><br><span class="line">    echo 'a == b'</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $a != $b ]</span><br><span class="line">then</span><br><span class="line">    echo 'a != b'</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> linux中的表达式： `expr 表达式`</span><br><span class="line"><span class="meta">#</span> mac中的表达式：$((表达式))</span><br><span class="line">echo $(($a + $b))</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 关系运算符</span><br><span class="line">if [ $a -eq $b ]</span><br><span class="line">then</span><br><span class="line">    echo 'a==b'</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $a -ne $b ]</span><br><span class="line">then</span><br><span class="line">    echo 'a!=b'</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $a -gt $b ]</span><br><span class="line">then</span><br><span class="line">    echo 'a&gt;b'</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $a -lt $b ]</span><br><span class="line">then</span><br><span class="line">    echo 'a&lt;b'</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $a -ge $b ]</span><br><span class="line">then</span><br><span class="line">    echo 'a&gt;=b'</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $a -le $b ]</span><br><span class="line">then</span><br><span class="line">    echo 'a&lt;=b'</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">:&lt;&lt;EOF</span><br><span class="line"> 布尔运算符</span><br><span class="line"> !  非运算 [ !false ]  true</span><br><span class="line"> -o 或运算 [ $a -lt 20 -o $b -gt 100 ] true</span><br><span class="line"> -a 与运算 [ $a -lt 20 -a $b -gt 100 ] false</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">:&lt;&lt;EOF</span><br><span class="line">逻辑运算符</span><br><span class="line">&amp;&amp;  [[ $a -lt 100 &amp;&amp; $b -gt 100 ]]</span><br><span class="line">||  [[ $a -lt 100 || $b -gt 100 ]]</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 字符串运算符</span><br><span class="line">:&lt;&lt;EOF</span><br><span class="line">a='abc'</span><br><span class="line">b='efg'</span><br><span class="line"></span><br><span class="line">'a=b:' [ $a = $b ]</span><br><span class="line">'a!=b:' [ $a != $b ]</span><br><span class="line">'检测字符串长度是否为0:' [ -z $a ]</span><br><span class="line">'检测字符串长度是否不为0:' [ -n $a ]</span><br><span class="line">'检测字符串是否为空:' [ $a ]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 文件测试运算符</span><br><span class="line">'块设备:' [ -b $file ]</span><br><span class="line">'字符设备:' [ -c $file ]</span><br><span class="line">'目录:' [-d $file]</span><br><span class="line">'普通文件:' [ -f $file ]</span><br><span class="line">'是否是有名管道:' [ -p $file ]</span><br><span class="line">'读:' [ -r $file ]</span><br><span class="line">'写:' [ -w $file ]</span><br><span class="line">'执行:' [ -x $file ]</span><br><span class="line">'文件是否为空:' [ -s $file ]</span><br><span class="line">'检测文件（目录）是否存在：'  [ -e $file ]</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><h1 id="printf命令"><a href="#printf命令" class="headerlink" title="printf命令"></a>printf命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">printf '语法：printf format-string [args...]\n'</span><br><span class="line"></span><br><span class="line">format_str="%-10s %-8s %-4s\n"</span><br><span class="line">format_num="%-10s %-8s %-4.2f\n"</span><br><span class="line">printf "$format_str" 姓名 性别 体重Kg</span><br><span class="line">printf "$format_num" 郭靖 男 66.1234</span><br><span class="line">printf "$format_num" 黄蓉 女 32.1234</span><br><span class="line">printf "$format_num" 杨过 男 65.1234</span><br><span class="line">printf "$format_num" 小龙女 女 35.1234</span><br></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>if else</span><br><span class="line">a=10</span><br><span class="line">if [ $a == 10 ]</span><br><span class="line">then</span><br><span class="line">    echo $a</span><br><span class="line">else</span><br><span class="line">    echo 'no $a'</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> for循环</span><br><span class="line">for loop in 1 2 3 4 5</span><br><span class="line">do</span><br><span class="line">    echo $loop</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> while循环</span><br><span class="line">i=0</span><br><span class="line">while((i&lt;10)); do</span><br><span class="line">    let "i++"</span><br><span class="line">    echo $&#123;i&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 无限循环</span><br><span class="line">:&lt;&lt;EOF</span><br><span class="line">while true; do</span><br><span class="line">    echo 'loop'</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">for ((;;))</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> util语句</span><br><span class="line">j=0</span><br><span class="line">until ((j&gt;10)); do</span><br><span class="line">    let "j++"</span><br><span class="line">    echo $&#123;j&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> case语句</span><br><span class="line">echo '输入1到4之间的数字：'</span><br><span class="line">echo '你输入的数字为：'</span><br><span class="line">read num</span><br><span class="line">case $num in </span><br><span class="line">    1) echo '你选择了1';;</span><br><span class="line">    2) echo '你选择了2';;</span><br><span class="line">    3) echo '你选择了3';;</span><br><span class="line">    4) echo '你选择了4';;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 跳出循环</span><br><span class="line"><span class="meta">#</span> break语句</span><br><span class="line">while true; do</span><br><span class="line">    echo -n '输入1-5之间的数字'</span><br><span class="line">    read num</span><br><span class="line">    case $num in</span><br><span class="line">        1|2|3|4|5) echo "你输入了$num";;</span><br><span class="line">        *) </span><br><span class="line">            echo '你输入的不是1-5之间的数字，程序退出'</span><br><span class="line">            break</span><br><span class="line">        ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>continue语句</span><br><span class="line">while true; do</span><br><span class="line">    echo -n '输入1-5之间的数字'</span><br><span class="line">    read num</span><br><span class="line">    case $num in</span><br><span class="line">        1|2|3|4|5) echo "你输入了$num";;</span><br><span class="line">        0)</span><br><span class="line">            echo '程序结束'</span><br><span class="line">            break</span><br><span class="line">        ;;</span><br><span class="line">        *) </span><br><span class="line">            echo '你输入的不是1-5之间的数字，程序退出'</span><br><span class="line">            continue</span><br><span class="line">        ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">console()&#123;</span><br><span class="line">    echo 'console sth.'</span><br><span class="line">    echo "参数:$1"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo '输出函数：'</span><br><span class="line">console</span><br><span class="line">console zong</span><br><span class="line"></span><br><span class="line">add()&#123;</span><br><span class="line">    echo '输入两个数进行加运算'</span><br><span class="line">    echo '请输入第一个数:'</span><br><span class="line">    read num1</span><br><span class="line">    echo '请输入第二个数:'</span><br><span class="line">    read num2</span><br><span class="line">    return $(($num1+$num2))</span><br><span class="line">&#125;</span><br><span class="line">add</span><br><span class="line">echo "输入的两个数之和为：$?"</span><br></pre></td></tr></table></figure><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">. filename  # 注意点号(.)和文件名中间有一个空格</span><br><span class="line">or </span><br><span class="line">source filename</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.runoob.com/linux/linux-shell.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;基础知识&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;shell标识&quot;&gt;&lt;a href=&quot;#shell标识&quot; cl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://zongan.live/2018/08/17/vim/"/>
    <id>http://zongan.live/2018/08/17/vim/</id>
    <published>2018-08-17T14:21:34.706Z</published>
    <updated>2018-08-17T14:38:00.843Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif" alt="vim 键盘图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif&quot; alt=&quot;vim 键盘图&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://zongan.live/2018/08/17/express/"/>
    <id>http://zongan.live/2018/08/17/express/</id>
    <published>2018-08-17T08:45:33.932Z</published>
    <updated>2018-08-17T10:24:17.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装-Express"><a href="#安装-Express" class="headerlink" title="安装 Express"></a>安装 Express</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install express --save</span><br></pre></td></tr></table></figure><p>需要和express框架一起安装的模块：</p><ul><li>body-parser<br>node.js中间件，用于处理json,raw,text和url编码的数据。<br>四种不同的处理方法：<br><code>bodyParser.json(options)</code>          处理json数据<br><code>bodyParser.raw(options)</code>           Buffer流数据<br><code>bodyParser.text(options)</code>          文本数据<br><code>bodyParser.urlencoded(options)</code>    UTF-8的编码数据</li></ul><p>三种用法：</p><ol><li><p>底层中间件用法：这将拦截和解析所有的请求；即全局的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"><span class="comment">//全局拦截</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.setHeader(<span class="string">'Content-Type'</span>,<span class="string">'text/plain'</span>)</span><br><span class="line">    res.write(<span class="string">'you posted:\n'</span>)</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(req.body,<span class="literal">null</span>,<span class="number">2</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>特定路由下的中间件用法：对特定路由下的特定请求，只有请求该路由时，中间件才会拦截和解析该请求，即局部的，也是最常用的一个方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"><span class="comment">// create application/json parser</span></span><br><span class="line"><span class="keyword">var</span> jsonParser = bodyParser.json()</span><br><span class="line"><span class="comment">// create application/x-www-form-urlencoded parser</span></span><br><span class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"><span class="comment">// POST /login gets urlencoded bodies</span></span><br><span class="line">app.post(<span class="string">'/login'</span>, urlencodedParser, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (!req.body) <span class="keyword">return</span> res.sendStatus(<span class="number">400</span>)</span><br><span class="line"> res.send(<span class="string">'welcome, '</span> + req.body.username)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// POST /api/users gets JSON bodies</span></span><br><span class="line">app.post(<span class="string">'/api/users'</span>, jsonParser, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (!req.body) <span class="keyword">return</span> res.sendStatus(<span class="number">400</span>)</span><br><span class="line"> <span class="comment">// create user in req.body</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>设置Content-Type 属性；用于修改和设定中间件解析的body类容类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parse various different custom JSON types as JSON</span></span><br><span class="line">app.use(bodyParser.json(&#123; <span class="attr">type</span>: <span class="string">'application/*+json'</span> &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// parse some custom thing into a Buffer</span></span><br><span class="line">app.use(bodyParser.raw(&#123; <span class="attr">type</span>: <span class="string">'application/vnd.custom-type'</span> &#125;));</span><br><span class="line"> </span><br><span class="line"><span class="comment">// parse an HTML body into a string</span></span><br><span class="line">app.use(bodyParser.text(&#123; <span class="attr">type</span>: <span class="string">'text/html'</span> &#125;));</span><br></pre></td></tr></table></figure></li></ol><ul><li>cookie-parser<br>这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象</li><li>multer<br>express官方推荐的文件上传中间件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install body-parser cookie-parser multer --save</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装-Express&quot;&gt;&lt;a href=&quot;#安装-Express&quot; class=&quot;headerlink&quot; title=&quot;安装 Express&quot;&gt;&lt;/a&gt;安装 Express&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;tab
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="http://zongan.live/2018/08/17/webpack/"/>
    <id>http://zongan.live/2018/08/17/webpack/</id>
    <published>2018-08-17T06:08:57.587Z</published>
    <updated>2018-08-17T06:08:57.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入口-Entry"><a href="#入口-Entry" class="headerlink" title="入口(Entry)"></a>入口(Entry)</h1><p>入口起点告诉webpack从哪里开始<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry:<span class="string">'./path/to/my/entry/file.js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="出口-Output"><a href="#出口-Output" class="headerlink" title="出口(Output)"></a>出口(Output)</h1><p>将所有资源assets归拢在一起后，还需要告诉 webpack 在哪里打包应用程序。webpack 的 output 属性描述了如何处理归拢在一起的代码(bundled code)。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>在上面的例子中，我们通过 output.filename 和 output.path 属性，来告诉 webpack bundle 的名称，以及我们想要生成(emit)到哪里。</p><h1 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h1><p>webpack 的目标是，让 webpack 聚焦于项目中的所有资源(asset)，而浏览器不需要关注考虑这些（明确的说，这并不意味着所有资源(asset)都必须打包在一起）。webpack 把每个文件(.css, .html, .scss, .jpg, etc.) 都作为模块处理。然而 webpack 自身只理解 JavaScript。</p><p>webpack loader 在文件被添加到依赖图中时，其转换为模块。</p><p>在更高层面，在 webpack 的配置中 loader 有两个目标。</p><p>识别出(identify)应该被对应的 loader 进行转换(transform)的那些文件。(test 属性)<br>转换这些文件，从而使其能够被添加到依赖图中（并且最终添加到 bundle 中）(use 属性)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">'raw-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure></p><p>以上配置中，对一个单独的 module 对象定义了 rules 属性，里面包含两个必须属性：test 和 use。这告诉 webpack 编译器(compiler) 如下信息：</p><blockquote><p>“嘿，webpack 编译器，当你碰到在 require()/import 语句中被解析为 ‘.txt’ 的路径时，在你对它打包之前，先使用 raw-loader 转换一下。”</p></blockquote><p>重要的是要记得，在 webpack 配置中定义 loader 时，要定义在 module.rules 中，而不是 rules。然而，在定义错误时 webpack 会给出严重的警告。</p><h1 id="插件-plugins"><a href="#插件-plugins" class="headerlink" title="插件(plugins)"></a>插件(plugins)</h1><p>然而由于 loader 仅在每个文件的基础上执行转换，而 插件(plugins) 更常用于（但不限于）在打包模块的 “compilation” 和 “chunk” 生命周期执行操作和自定义功能（查看更多）。webpack 的插件系统极其强大和可定制化。</p><p>想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 来创建它的一个实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); <span class="comment">//installed via npm</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>); <span class="comment">//to access built-in plugins</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">'raw-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'./src/index.html'</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure></p><p>更多详细内容查看<a href="https://doc.webpack-china.org" target="_blank" rel="noopener">官网</a></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html-webpack-plugin: index.html自动插入js</span><br><span class="line">clean-webpack-plugin: 清理文件夹</span><br><span class="line">WebpackManifestPlugin: 文件映射提取到json</span><br></pre></td></tr></table></figure><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p>开发工具：<br>inline-source-map （不能用于生产环境）<br>webpack-dev-server（开启开发服务器，如果现在修改和保存任意源文件，web服务器就会自动重新加载编译后的代码。)<br>webpack-dev-middleware</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;入口-Entry&quot;&gt;&lt;a href=&quot;#入口-Entry&quot; class=&quot;headerlink&quot; title=&quot;入口(Entry)&quot;&gt;&lt;/a&gt;入口(Entry)&lt;/h1&gt;&lt;p&gt;入口起点告诉webpack从哪里开始&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//webpack.config.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    entry:&lt;span class=&quot;string&quot;&gt;&#39;./path/to/my/entry/file.js&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;出口-Output&quot;&gt;&lt;a href=&quot;#出口-Output&quot; class=&quot;headerlink&quot; title=&quot;出口(Output)&quot;&gt;&lt;/a&gt;出口(Output)&lt;/h1&gt;&lt;p&gt;将所有资源assets归拢在一起后，还需要告诉 webpack 在哪里打包应用程序。webpack 的 output 属性描述了如何处理归拢在一起的代码(bundled code)。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//webpack.config.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;path&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  entry: &lt;span class=&quot;string&quot;&gt;&#39;./path/to/my/entry/file.js&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  output: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path: path.resolve(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;dist&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filename: &lt;span class=&quot;string&quot;&gt;&#39;my-first-webpack.bundle.js&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zongan.live/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="构建工具" scheme="http://zongan.live/categories/%E5%89%8D%E7%AB%AF/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="tech" scheme="http://zongan.live/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>weex</title>
    <link href="http://zongan.live/2018/08/17/weex/"/>
    <id>http://zongan.live/2018/08/17/weex/</id>
    <published>2018-08-17T06:08:57.587Z</published>
    <updated>2018-08-17T06:08:57.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">weex create projectName</span><br><span class="line">or</span><br><span class="line">weex init projectName</span><br></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//通过weex compile命令行工具进行单个文件或者整个项目的打包</span><br><span class="line">weex compile src/index.vue dist</span><br></pre></td></tr></table></figure><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="实时预览"><a href="#实时预览" class="headerlink" title="实时预览"></a>实时预览</h3><ul><li><p>当前页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weex src/index.vue</span><br></pre></td></tr></table></figure></li><li><p>整个项目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在传入的参数指定预览的目录和入口文件</span></span><br><span class="line">weex src --entry src/index.vue</span><br></pre></td></tr></table></figure></li></ul><h3 id="调试weex页面"><a href="#调试weex页面" class="headerlink" title="调试weex页面"></a>调试weex页面</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启debug</span></span><br><span class="line">weex debug</span><br></pre></td></tr></table></figure><ul><li><p>调试.we|.vue文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weex debug index.vue</span><br></pre></td></tr></table></figure></li><li><p>调试目录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调试整个目录的文件，只需要传入目录的路径和入口文件即可</span></span><br><span class="line">weex debug [dir] -e index.vue</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=&quot;headerlink&quot; title=&quot;创建项目&quot;&gt;&lt;/a&gt;创建项目&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="APP开发" scheme="http://zongan.live/categories/APP%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="tech" scheme="http://zongan.live/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy</title>
    <link href="http://zongan.live/2018/08/17/scrapy/"/>
    <id>http://zongan.live/2018/08/17/scrapy/</id>
    <published>2018-08-17T06:08:57.586Z</published>
    <updated>2018-08-17T06:08:57.587Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.scrapy.org/en/latest/" target="_blank" rel="noopener">官方文档</a></p><h1 id="Spiders"><a href="#Spiders" class="headerlink" title="Spiders"></a>Spiders</h1><h2 id="通用爬虫-Generic-Spider"><a href="#通用爬虫-Generic-Spider" class="headerlink" title="通用爬虫(Generic Spider)"></a>通用爬虫(Generic Spider)</h2><p>Scrapy内置了一些通用的爬虫基类，你可以通过继承这些基类来快速构建自己的爬虫。这些内置爬虫基类提供了许多常用功能，比如：通过指定的规则，sitemaps或者xml/csv格式的feed文件爬取网站的链接。<br>接下来的例子，假定你已经创建了scrapy项目，在items.py<br>中申明TestItem类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    id = scrapy.Field()</span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    description = scrapy.Field()</span><br></pre></td></tr></table></figure></p><h3 id="CrawlSpider"><a href="#CrawlSpider" class="headerlink" title="CrawlSpider"></a>CrawlSpider</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">spiders</span>.<span class="title">CrawlSpider</span></span></span><br></pre></td></tr></table></figure><a id="more"></a><p>这是爬取正规网站最常用的爬虫，它通过一系列的规则为跟踪网站链接提供方便的机制。对于特殊的网站或项目它或许不是最适合的，但对于常用的网站足矣。对于特殊的功能，你可以继承它，然后重载自定义部分即可，或者用它来实现你自己的爬虫。<br>与从spider继承的属性（需要指定）不同的是，该类支持一个特殊的属性：</p><blockquote><p>rules     </p></blockquote><p>Rule对象的一个或多个列表，每个Rule为爬取网站定义了明确的行为。Rules Objects将在后面的部分进行介绍。如果多个Rule匹配了同一个链接，只有第一个匹配生效，取决于它们在改属性中的顺序。</p><p>CrawlSpider还暴露了一个可重写的方法：</p><blockquote><p>parse_start_url(response)</p></blockquote><pre><code>这个方法将被start_urls的响应调用，它允许解析初始的responses,必须返回一个Item对象或一个Request对象，或者一个包含这2个对象的可迭代类型。</code></pre><h4 id="Crawling-rules"><a href="#Crawling-rules" class="headerlink" title="Crawling rules"></a>Crawling rules</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">spiders</span>.<span class="title">Rule</span><span class="params">(link_extractor,callback=None,cb_kwargs=None,follow=None,process_links=None,process_request=None)</span></span></span><br></pre></td></tr></table></figure><p>link_extractor是一个<a href="https://docs.scrapy.org/en/latest/topics/link-extractors.html#topics-link-extractors" target="_blank" rel="noopener">Link Extractor</a>对象，用于提取爬取到的页面中的链接。<br>callback每个提取到的链接调用的函数或字符串，这个callback的第一个参数是链接的response，必须返回一个Item或Request对象。</p><blockquote><p>注意：不能将parse作为callback，因为CrawlSpider使用parse作为它处理逻辑的默认方法，如果重写,crawl spider讲不能正常工作。</p></blockquote><p>cb_kwargscallback的参数<br>follow布尔类型，控制是否爬取页面中提取到的链接。如果没有callback，follow的默认值为True,否则默认False<br>process_links功能类似callback，主要用于过滤<br>process_request 被匹配本条Rule的request调用，必须返回一个request或者None</p><h4 id="CrawlSpider例子"><a href="#CrawlSpider例子" class="headerlink" title="CrawlSpider例子"></a>CrawlSpider例子</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(CrawlSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'example.com'</span></span><br><span class="line">    allowed_domains = [<span class="string">'example.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://www.example.com'</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        <span class="comment"># Extract links matching 'category.php' (but not matching 'subsection.php')</span></span><br><span class="line">        <span class="comment"># and follow links from them (since no callback means follow=True by default).</span></span><br><span class="line">        Rule(LinkExtractor(allow=(<span class="string">'category\.php'</span>, ), deny=(<span class="string">'subsection\.php'</span>, ))),</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Extract links matching 'item.php' and parse them with the spider's method parse_item</span></span><br><span class="line">        Rule(LinkExtractor(allow=(<span class="string">'item\.php'</span>, )), callback=<span class="string">'parse_item'</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        self.logger.info(<span class="string">'Hi, this is an item page! %s'</span>, response.url)</span><br><span class="line">        item = scrapy.Item()</span><br><span class="line">        item[<span class="string">'id'</span>] = response.xpath(<span class="string">'//td[@id="item_id"]/text()'</span>).re(<span class="string">r'ID: (\d+)'</span>)</span><br><span class="line">        item[<span class="string">'name'</span>] = response.xpath(<span class="string">'//td[@id="item_name"]/text()'</span>).extract()</span><br><span class="line">        item[<span class="string">'description'</span>] = response.xpath(<span class="string">'//td[@id="item_description"]/text()'</span>).extract()</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><p>这个爬虫将爬取example.com的首页，收集category和item页面的链接，item页面的链接使用parse_item方法解析，每个response将使用xpath提取数据，并返回一个Item对象。</p><h3 id="XMLFeedSpider"><a href="#XMLFeedSpider" class="headerlink" title="XMLFeedSpider"></a>XMLFeedSpider</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">spiders</span>.<span class="title">XMLFeedSpider</span></span></span><br></pre></td></tr></table></figure><p>XMLFeedSpider被设计用来通过迭代指定的节点解析xml格式的订阅内容。解析器可选：iternodes,xml和html。出于性能考虑，推荐使用iternodes，因为xml和html为了解析一次性生成了整个DOM。然而，当解析的XML标记有问题时，使用html作为解析器是不错的选择。<br>通过设置以下类属性来设置解析器和标签名：<br>iterator 字符串，定义解析器。</p><ul><li>‘iternodes’ 基于正则表达式的快速解析器,默认。</li><li>‘html’ 使用Selector的解析器，将所有Dom加载进内存，然后通过Dom解析。</li><li>‘xml’ 同html</li></ul><p>itertag 定义解析的节点<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itertag = <span class="string">'product'</span></span><br></pre></td></tr></table></figure></p><p>namespaces<br>包含(prefix,uri)的列表，prefix和uri将会通过调用register_namespace()方法注册。<br>然后，你就可以在itertag中通过命名空间指定节点.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span><span class="params">(XMLFeedSpider)</span>:</span></span><br><span class="line">    namespaces = [(<span class="string">'n'</span>, <span class="string">'http://www.sitemaps.org/schemas/sitemap/0.9'</span>)]</span><br><span class="line">    itertag = <span class="string">'n:url'</span></span><br></pre></td></tr></table></figure></p><p>可重写的方法：</p><blockquote><p>adapt_response(response)<br>在response到达spider中间件后，spider解析前，对response body进行修改,返回一个新的reponse或者原来的response</p><p>parse_node(response, selector)<br>被itertag匹配的nodes调用，接收node的response和Selector,这个方法是必须重写的，否则，spider将不能正常工作。<br>返回一个Item对象或Request对象，或者包含它们的可迭代内容。</p><p>process_results(response, results)<br>被spider返回的结果调用，用于处理返回至框架核心前的最后一次请求，比如：设置item的ID。它接收一个结果的列表和生成这些结果的response。它必须返回一个结果的列表。</p></blockquote><h4 id="XMLFeedSpider-例子："><a href="#XMLFeedSpider-例子：" class="headerlink" title="XMLFeedSpider 例子："></a>XMLFeedSpider 例子：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> XMLFeedSpider</span><br><span class="line"><span class="keyword">from</span> myproject.items <span class="keyword">import</span> TestItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(XMLFeedSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'example.com'</span></span><br><span class="line">    allowed_domains = [<span class="string">'example.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://www.example.com/feed.xml'</span>]</span><br><span class="line">    iterator = <span class="string">'iternodes'</span>  <span class="comment"># This is actually unnecessary, since it's the default value</span></span><br><span class="line">    itertag = <span class="string">'item'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_node</span><span class="params">(self, response, node)</span>:</span></span><br><span class="line">        self.logger.info(<span class="string">'Hi, this is a &lt;%s&gt; node!: %s'</span>, self.itertag, <span class="string">''</span>.join(node.extract()))</span><br><span class="line"></span><br><span class="line">        item = TestItem()</span><br><span class="line">        item[<span class="string">'id'</span>] = node.xpath(<span class="string">'@id'</span>).extract()</span><br><span class="line">        item[<span class="string">'name'</span>] = node.xpath(<span class="string">'name'</span>).extract()</span><br><span class="line">        item[<span class="string">'description'</span>] = node.xpath(<span class="string">'description'</span>).extract()</span><br></pre></td></tr></table></figure><p>spider下载start_urls中给定的feed文档，然后通过itertag标签迭代节点item，输出并存储随机数据到Item中。</p><h3 id="CSVFeedSpider"><a href="#CSVFeedSpider" class="headerlink" title="CSVFeedSpider"></a>CSVFeedSpider</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">spiders</span>.<span class="title">CSVFeedSpider</span></span></span><br></pre></td></tr></table></figure><p>CSVFeedSpider和XMLFeedSpider很像，除了迭代的对象是rows而不是nodes。每个迭代过程中调用parse_row()。</p><blockquote><p>delimiter      </p></blockquote><p>每个字段的分隔符，在CSV文件中默认是’,’</p><blockquote><p>quotechar</p></blockquote><p>包含每个字段的符号，在CSV中默认是’”‘</p><blockquote><p>headers</p></blockquote><p>CSV文件的列名，一个列表[]</p><blockquote><p>parse_row(response,row)</p></blockquote><p>接收一个reponse参数和一个字典(代表每一行，键是csv文件的列名)。</p><p>CSVFeedSpider也可重写adapt_response 和 process_results方法。</p><p>实例:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CSVFeedSpider</span><br><span class="line"><span class="keyword">from</span> myproject.items <span class="keyword">import</span> TestItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(CSVFeedSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'example.com'</span></span><br><span class="line">    allowed_domains = [<span class="string">'example.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://www.example.com/feed.csv'</span>]</span><br><span class="line">    delimiter = <span class="string">';'</span></span><br><span class="line">    quotechar = <span class="string">"'"</span></span><br><span class="line">    headers = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'description'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_row</span><span class="params">(self, response, row)</span>:</span></span><br><span class="line">        self.logger.info(<span class="string">'Hi, this is a row!: %r'</span>, row)</span><br><span class="line"></span><br><span class="line">        item = TestItem()</span><br><span class="line">        item[<span class="string">'id'</span>] = row[<span class="string">'id'</span>]</span><br><span class="line">        item[<span class="string">'name'</span>] = row[<span class="string">'name'</span>]</span><br><span class="line">        item[<span class="string">'description'</span>] = row[<span class="string">'description'</span>]</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></p><h3 id="SitemapSpider"><a href="#SitemapSpider" class="headerlink" title="SitemapSpider"></a>SitemapSpider</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">spiders</span>.<span class="title">SitemapSpider</span></span></span><br></pre></td></tr></table></figure><p>SitemapSpider允许你根据网站的sitemaps进行爬取内容。它支持嵌套的sitemaps和从robots.txt文件中发现sitemap。</p><blockquote><p>sitemap_urls  </p></blockquote><p> 一个指向sitemaps的列表，包含了爬虫将要爬取得urls，也可指向robots.txt文件，它将从中提取出sitemap的urls</p><blockquote><p>sitemap_rules</p></blockquote><p>一个(regex,callback)的列表：<br>regex: 从sitemaps中匹配urls的正则表达式，regex可以是字符串或编译的正则表达式对象。<br>callback：字符串或可调用的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sitemap_rules = [(&apos;/product/&apos;, &apos;parse_product&apos;)]</span><br></pre></td></tr></table></figure><p>规则按顺序匹配，选择匹配到的第一个。如果省略该属性，sitemap_urls中的所有urls将被parse处理。</p><blockquote><p>sitemap_follow</p></blockquote><p>需要被跟踪的sitemap的正则表达式列表。仅对使用sitemap文件指向其他sitemap文件的站点有效。<br>默认的所有站点将被followed。</p><blockquote><p>sitemap_alternate_links</p></blockquote><p>指定 alternate links是否应该被followed。alternate links是指向同一网站的不同语言链接,使用的同一个url标记。<br>如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loc</span>&gt;</span>http://example.com/<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xhtml:link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">hreflang</span>=<span class="string">"de"</span> <span class="attr">href</span>=<span class="string">"http://example.com/de"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果配置了sitemap_alternate_links，将会检测<a href="http://example.com/和http://example.com/de。" target="_blank" rel="noopener">http://example.com/和http://example.com/de。</a><br>如果sitemap_alternate_links 为disabled，将只会检测<a href="http://example.com/，默认为disabled。" target="_blank" rel="noopener">http://example.com/，默认为disabled。</a></p><p>例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//解析sitemaps中的所有url</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> SitemapSpider</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(SitemapSpider)</span>:</span></span><br><span class="line">    sitemap_urls = [<span class="string">'http://www.example.com/sitemap.xml'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> <span class="comment"># ... scrape item here ...</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//通过sitemap_rules分别指定不同的链接的解析</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> SitemapSpider</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(SitemapSpider)</span>:</span></span><br><span class="line">    sitemap_urls = [<span class="string">'http://www.example.com/sitemap.xml'</span>]</span><br><span class="line">    sitemap_rules = [</span><br><span class="line">        (<span class="string">'/product/'</span>, <span class="string">'parse_product'</span>),</span><br><span class="line">        (<span class="string">'/category/'</span>, <span class="string">'parse_category'</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_product</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> <span class="comment"># ... scrape product ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_category</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> <span class="comment"># ... scrape category ...</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//通过robots.txt文件跟踪sitemaps，并且只跟踪包含/sitemap_shop的链接</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> SitemapSpider</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(SitemapSpider)</span>:</span></span><br><span class="line">    sitemap_urls = [<span class="string">'http://www.example.com/robots.txt'</span>]</span><br><span class="line">    sitemap_rules = [</span><br><span class="line">        (<span class="string">'/shop/'</span>, <span class="string">'parse_shop'</span>),</span><br><span class="line">    ]</span><br><span class="line">    sitemap_follow = [<span class="string">'/sitemap_shops'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_shop</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> <span class="comment"># ... scrape shop here ...</span></span><br></pre></td></tr></table></figure><p>结合SitemapSpider和其他的urls<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> SitemapSpider</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(SitemapSpider)</span>:</span></span><br><span class="line">    sitemap_urls = [<span class="string">'http://www.example.com/robots.txt'</span>]</span><br><span class="line">    sitemap_rules = [</span><br><span class="line">        (<span class="string">'/shop/'</span>, <span class="string">'parse_shop'</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    other_urls = [<span class="string">'http://www.example.com/about'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        requests = list(super(MySpider, self).start_requests())</span><br><span class="line">        requests += [scrapy.Request(x, self.parse_other) <span class="keyword">for</span> x <span class="keyword">in</span> self.other_urls]</span><br><span class="line">        <span class="keyword">return</span> requests</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_shop</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> <span class="comment"># ... scrape shop here ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_other</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> <span class="comment"># ... scrape other here ...</span></span><br></pre></td></tr></table></figure></p><h1 id="Selectors"><a href="#Selectors" class="headerlink" title="Selectors"></a>Selectors</h1><p>当你爬取网站页面的时候，最常见的事情就是从html中提取数据。下面介绍几个这方面的库：</p><ul><li>BeautifulSoup<br>  在python开发者中非常流行的爬虫库，通过html结构创建python对象，能够合理的处理坏标签。但是它有一个缺点：慢。</li><li>lxml<br>  xml解析库，也能解析html，通过一个pythonic的API：ElementTree。lxml不是python标准库的一部分。</li></ul><p>Scrapy有自己的提取数据的机制，被称为selectors，因为它通过XPath或CSS表达式选择HTML中指定部分。</p><p>XPath是一重在XML文档中选择nodes的语言，也能够用于html。CSS是应用于html样式的语言。它定义selectors关联到那些指定样式的html元素。</p><p>Scrapy selectors是建立在lxml库上的，这意味着它们在速度和解析准确度上非常相似。</p><p>下面介绍selectors是如何工作的，以及描述它小而简单的API，不同于lxml API，lxml API非常大，因为它被用来实现很多任务，不仅仅是选择文档标记。</p><p>完整的<a href="https://docs.scrapy.org/en/latest/topics/selectors.html#topics-selectors-ref" target="_blank" rel="noopener">Selector</a>参考</p><h2 id="使用Selectors"><a href="#使用Selectors" class="headerlink" title="使用Selectors"></a>使用Selectors</h2><p><strong>构建Selectors</strong><br>Scrapy selectors是Selector类的实例，通过传入text或TextResponse对象生成。它根据输入的类型自动选择最合适的解析规则（XML vs HTML）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;<span class="keyword">from</span> scrapy.selector <span class="keyword">import</span> Selector</span><br><span class="line">&gt;&gt;<span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</span><br><span class="line">//通过text构建</span><br><span class="line">&gt;&gt;body = <span class="string">'&lt;html&gt;&lt;body&gt;&lt;span&gt;good&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;'</span></span><br><span class="line">&gt;&gt;Selector(text=body).xpath(<span class="string">'//span/text()'</span>).extract()</span><br><span class="line">[<span class="string">u'good'</span>]</span><br><span class="line">//从response构建</span><br><span class="line">&gt;&gt;response = HtmlResponse(url=<span class="string">'http://example.com'</span>,body=body)</span><br><span class="line">&gt;&gt;Selector(response=response).xpath(<span class="string">'//span/text()'</span>).extract()</span><br><span class="line">[<span class="string">u'good]</span></span><br></pre></td></tr></table></figure></p><p>为了更便捷，response暴露了一个属性.selector，完全等价于上面的操作：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.selector.xpath(<span class="string">'//span/text()'</span>).extract()</span><br></pre></td></tr></table></figure></p><p><strong>使用</strong><br>为了解释怎么使用selectors，我们接下来将使用Scrapy shell和Scrapy服务器上的页面做实验：<br><a href="http://doc.scrapy.org/en/latest/_static/selectors-sample1.html" target="_blank" rel="noopener">官网链接</a></p><p>HTML文档内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">'http://example.com/'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example website<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'images'</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'image1.html'</span>&gt;</span>Name: My image 1 <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'image1_thumb.jpg'</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'image2.html'</span>&gt;</span>Name: My image 2 <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'image2_thumb.jpg'</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'image3.html'</span>&gt;</span>Name: My image 3 <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'image3_thumb.jpg'</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'image4.html'</span>&gt;</span>Name: My image 4 <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'image4_thumb.jpg'</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'image5.html'</span>&gt;</span>Name: My image 5 <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'image5_thumb.jpg'</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>首先，打开shell<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell http://doc.scrapy.org/en/latest/_static/selectors-sample1.html</span><br></pre></td></tr></table></figure></p><p>然后，等待加载完成，你可以通过response变量获取响应结果，并且包含了response.selector属性。<br>因为我们处理的HTML，选择器自动使用HTML parser。<br>查看HTML页面代码，让我们一起构建一个XPath来获取title标记中的文本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.selector.xpath(<span class="string">'//title/text()'</span>)</span><br><span class="line">[&lt;Selector (text) xpath=//title/text()&gt;]</span><br></pre></td></tr></table></figure></p><p>因为查询响应使用XPath和CSS太常用了，所以reponses提供了2个便利的方式：response.xpath() 和 response.css():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//title/text()'</span>)</span><br><span class="line">[&lt;Selector (text) xpath=//title/text()&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title::text'</span>)</span><br><span class="line">[&lt;Selector (text) xpath=//title/text()&gt;]</span><br></pre></td></tr></table></figure></p><p>如你所见，.xpath()和.css()方法返回一个selector实例的列表，使用这个API可以快速的选择嵌套的数据。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'img'</span>).xpath(<span class="string">'@src'</span>).extract()</span><br><span class="line">[<span class="string">u'image1_thumb.jpg'</span>,</span><br><span class="line"> <span class="string">u'image2_thumb.jpg'</span>,</span><br><span class="line"> <span class="string">u'image3_thumb.jpg'</span>,</span><br><span class="line"> <span class="string">u'image4_thumb.jpg'</span>,</span><br><span class="line"> <span class="string">u'image5_thumb.jpg'</span>]</span><br></pre></td></tr></table></figure></p><p>提取文本数据，你必须使用.extract()方法，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//title/text()'</span>).extract()</span><br><span class="line">[<span class="string">u'Example website'</span>]</span><br></pre></td></tr></table></figure></p><p>如果你只是想提取匹配到的第一个元素，可以使用.extract_first()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//div[@id="images"]/a/text()'</span>).extract_first()</span><br><span class="line"><span class="string">u'Name: My image 1 '</span></span><br></pre></td></tr></table></figure></p><p>如果没有找到元素将返回None,可通过传递一个参数来设置默认值取代None：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//div[@id="not-exists"]/text()'</span>).extract_first(default=<span class="string">'not-found'</span>)</span><br><span class="line"><span class="string">'not-found'</span></span><br></pre></td></tr></table></figure></p><p>css选择器可以使用css3的伪类元素来选择文本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title::text'</span>).extract()</span><br><span class="line">[<span class="string">u'Example website'</span>]</span><br></pre></td></tr></table></figure></p><p>现在我们将获取基本的URL和一些图片链接：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//base/@href'</span>).extract()</span><br><span class="line">[<span class="string">u'http://example.com/'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'base::attr(href)'</span>).extract()</span><br><span class="line">[<span class="string">u'http://example.com/'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//a[contains(@href, "image")]/@href'</span>).extract()</span><br><span class="line">[<span class="string">u'image1.html'</span>,</span><br><span class="line"> <span class="string">u'image2.html'</span>,</span><br><span class="line"> <span class="string">u'image3.html'</span>,</span><br><span class="line"> <span class="string">u'image4.html'</span>,</span><br><span class="line"> <span class="string">u'image5.html'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'a[href*=image]::attr(href)'</span>).extract()</span><br><span class="line">[<span class="string">u'image1.html'</span>,</span><br><span class="line"> <span class="string">u'image2.html'</span>,</span><br><span class="line"> <span class="string">u'image3.html'</span>,</span><br><span class="line"> <span class="string">u'image4.html'</span>,</span><br><span class="line"> <span class="string">u'image5.html'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//a[contains(@href, "image")]/img/@src'</span>).extract()</span><br><span class="line">[<span class="string">u'image1_thumb.jpg'</span>,</span><br><span class="line"> <span class="string">u'image2_thumb.jpg'</span>,</span><br><span class="line"> <span class="string">u'image3_thumb.jpg'</span>,</span><br><span class="line"> <span class="string">u'image4_thumb.jpg'</span>,</span><br><span class="line"> <span class="string">u'image5_thumb.jpg'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'a[href*=image] img::attr(src)'</span>).extract()</span><br><span class="line">[<span class="string">u'image1_thumb.jpg'</span>,</span><br><span class="line"> <span class="string">u'image2_thumb.jpg'</span>,</span><br><span class="line"> <span class="string">u'image3_thumb.jpg'</span>,</span><br><span class="line"> <span class="string">u'image4_thumb.jpg'</span>,</span><br><span class="line"> <span class="string">u'image5_thumb.jpg'</span>]</span><br></pre></td></tr></table></figure></p><p><strong>嵌套选择器</strong><br>.xpath()和.css()返回一些相同类型的selectors，因此你能为这些selectors调用selection的方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>links = response.xpath(<span class="string">'//a[contains(@href, "image")]'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>links.extract()</span><br><span class="line">[<span class="string">u'&lt;a href="image1.html"&gt;Name: My image 1 &lt;br&gt;&lt;img src="image1_thumb.jpg"&gt;&lt;/a&gt;'</span>,</span><br><span class="line"> <span class="string">u'&lt;a href="image2.html"&gt;Name: My image 2 &lt;br&gt;&lt;img src="image2_thumb.jpg"&gt;&lt;/a&gt;'</span>,</span><br><span class="line"> <span class="string">u'&lt;a href="image3.html"&gt;Name: My image 3 &lt;br&gt;&lt;img src="image3_thumb.jpg"&gt;&lt;/a&gt;'</span>,</span><br><span class="line"> <span class="string">u'&lt;a href="image4.html"&gt;Name: My image 4 &lt;br&gt;&lt;img src="image4_thumb.jpg"&gt;&lt;/a&gt;'</span>,</span><br><span class="line"> <span class="string">u'&lt;a href="image5.html"&gt;Name: My image 5 &lt;br&gt;&lt;img src="image5_thumb.jpg"&gt;&lt;/a&gt;'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> index, link <span class="keyword">in</span> enumerate(links):</span><br><span class="line"><span class="meta">... </span>    args = (index, link.xpath(<span class="string">'@href'</span>).extract(), link.xpath(<span class="string">'img/@src'</span>).extract())</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'Link number %d points to url %s and image %s'</span> % args</span><br><span class="line"></span><br><span class="line">Link number <span class="number">0</span> points to url [<span class="string">u'image1.html'</span>] <span class="keyword">and</span> image [<span class="string">u'image1_thumb.jpg'</span>]</span><br><span class="line">Link number <span class="number">1</span> points to url [<span class="string">u'image2.html'</span>] <span class="keyword">and</span> image [<span class="string">u'image2_thumb.jpg'</span>]</span><br><span class="line">Link number <span class="number">2</span> points to url [<span class="string">u'image3.html'</span>] <span class="keyword">and</span> image [<span class="string">u'image3_thumb.jpg'</span>]</span><br><span class="line">Link number <span class="number">3</span> points to url [<span class="string">u'image4.html'</span>] <span class="keyword">and</span> image [<span class="string">u'image4_thumb.jpg'</span>]</span><br><span class="line">Link number <span class="number">4</span> points to url [<span class="string">u'image5.html'</span>] <span class="keyword">and</span> image [<span class="string">u'image5_thumb.jpg'</span>]</span><br></pre></td></tr></table></figure></p><p><strong>使用带正则表达式的选择器</strong><br>Selector还有一个.re()方法，用于使用正则表达式提取数据。然而，不像.xpath()或.css()方法，.re()返回一个unicode字符串的列表。所以.re()不能嵌套。</p><p>从上面的html代码中提取图片名称：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; response.xpath(<span class="string">'//a[contains(@href, "image")]/text()'</span>).re(<span class="string">r'Name:\s*(.*)'</span>)</span><br><span class="line">[<span class="string">u'My image 1'</span>,</span><br><span class="line"> <span class="string">u'My image 2'</span>,</span><br><span class="line"> <span class="string">u'My image 3'</span>,</span><br><span class="line"> <span class="string">u'My image 4'</span>,</span><br><span class="line"> <span class="string">u'My image 5'</span>]</span><br></pre></td></tr></table></figure></p><p>提取匹配的第一个字符串：.re_first()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; response.xpath(&apos;//a[contains(@href, &quot;image&quot;)]/text()&apos;).re_first(r&apos;Name:\s*(.*)&apos;)</span><br><span class="line">u&apos;My image 1&apos;</span><br></pre></td></tr></table></figure></p><p><strong>使用相对路径的XPaths</strong><br>如果你使用’/‘开头的XPath进行嵌套选择，那么XPath将是相对于文档的绝对路径，而不是上一层选择器的路径。比如，你想选择出所有div下的p元素：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; divs = response.xpath(<span class="string">'//div'</span>)</span><br></pre></td></tr></table></figure></p><p>接下来，你可能想这样提取p元素：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;[p.extract() <span class="keyword">for</span> p <span class="keyword">in</span> div.xpath(<span class="string">'//p'</span>)]</span><br></pre></td></tr></table></figure></p><p>但是，这是错误的，这样将提取到所有的p元素。应该这样来写：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; [p.extract() <span class="keyword">for</span> p <span class="keyword">in</span> div.xpath(<span class="string">'.//p'</span>)]</span><br></pre></td></tr></table></figure></p><p>更多关于<a href="https://www.w3.org/TR/xpath#location-paths" target="_blank" rel="noopener">XPath相对路径</a>的资料</p><p><strong>XPath表达式中的变量</strong><br>XPath允许在表达式中使用变量，语法：$var。<br>下面通过id属性的值来匹配元素，没有硬编码。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; response.xpath(<span class="string">'//div[@id=$val]/a/text()'</span>,val=<span class="string">'images'</span>).extract_first()</span><br><span class="line"><span class="string">u'Name: My image 1'</span></span><br></pre></td></tr></table></figure></p><p>另外一个例子：查找含有5个a标签的div的id<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; response.xpath(<span class="string">'//div[count(a)=$cnt]/@id'</span>,cnt=<span class="number">5</span>).extract_first()</span><br><span class="line"><span class="string">u'images'</span></span><br></pre></td></tr></table></figure></p><p>所有引用的变量都必须赋值，不然xpath将报错。<br>更多关于<a href="https://parsel.readthedocs.io/en/latest/usage.html#variables-in-xpath-expressions" target="_blank" rel="noopener">XPath Variable</a></p><p><strong>使用EXSLT扩展</strong></p><p>建立在lxml上，Scrapy选择器也支持EXSLT扩展，内置了一些预先注册好的命名空间可以在XPath表达式中使用。</p><table><thead><tr><th>prefix</th><th>namespace</th><th>usage</th></tr></thead><tbody><tr><td>re</td><td><a href="http://exslt.org/regular-expressions" target="_blank" rel="noopener">http://exslt.org/regular-expressions</a></td><td>regular expressions</td></tr><tr><td>set</td><td><a href="http://exslt.org/sets" target="_blank" rel="noopener">http://exslt.org/sets</a></td><td>set manipulation</td></tr></tbody></table><p><strong>正则表达式</strong></p><p>当XPath的starts-with()或contains()不够用的时候，test()函数将会非常有用。<br>例如:从class以数字结尾的list的元素下提取链接。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;<span class="keyword">from</span> scrapy <span class="keyword">import</span> Selector</span><br><span class="line">&gt;&gt; doc = <span class="string">"""</span></span><br><span class="line"><span class="string"><span class="meta">... </span>&lt;div&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &lt;ul&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>        &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>        &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>        &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>        &lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>        &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &lt;/ul&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>&lt;/div&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>"""</span></span><br><span class="line">&gt;&gt; sel = Selector(text=doc,type=<span class="string">'html'</span>)</span><br><span class="line">&gt;&gt; sel.xpath(<span class="string">'//li//a/@href'</span>).extract()</span><br><span class="line">[<span class="string">u'link1.html'</span>, <span class="string">u'link2.html'</span>, <span class="string">u'link3.html'</span>, <span class="string">u'link4.html'</span>, <span class="string">u'link5.html'</span>]</span><br><span class="line">&gt;&gt; sel.xpath(<span class="string">'//li[re:test(@class,"item-\d$")]//@href'</span>).extract()</span><br><span class="line">[<span class="string">u'link1.html'</span>, <span class="string">u'link2.html'</span>, <span class="string">u'link4.html'</span>, <span class="string">u'link5.html'</span>]</span><br></pre></td></tr></table></figure></p><p><strong>设置操作</strong><br>可以方便的在提取文本元素前排除部分dom元素。<br>例如提取item的范围和相对应的属性<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc = <span class="string">"""</span></span><br><span class="line"><span class="string"><span class="meta">... </span>&lt;div itemscope itemtype="http://schema.org/Product"&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  &lt;span itemprop="name"&gt;Kenmore White 17" Microwave&lt;/span&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  &lt;img src="kenmore-microwave-17in.jpg" alt='Kenmore 17" Microwave' /&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  &lt;div itemprop="aggregateRating"</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    itemscope itemtype="http://schema.org/AggregateRating"&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>   Rated &lt;span itemprop="ratingValue"&gt;3.5&lt;/span&gt;/5</span></span><br><span class="line"><span class="string"><span class="meta">... </span>   based on &lt;span itemprop="reviewCount"&gt;11&lt;/span&gt; customer reviews</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  &lt;/div&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  &lt;div itemprop="offers" itemscope itemtype="http://schema.org/Offer"&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &lt;span itemprop="price"&gt;$55.00&lt;/span&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &lt;link itemprop="availability" href="http://schema.org/InStock" /&gt;In stock</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  &lt;/div&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  Product description:</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  &lt;span itemprop="description"&gt;0.7 cubic feet countertop microwave.</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  Has six preset cooking categories and convenience features like</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  Add-A-Minute and Child Lock.&lt;/span&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  Customer reviews:</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  &lt;div itemprop="review" itemscope itemtype="http://schema.org/Review"&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &lt;span itemprop="name"&gt;Not a happy camper&lt;/span&gt; -</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    by &lt;span itemprop="author"&gt;Ellie&lt;/span&gt;,</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &lt;meta itemprop="datePublished" content="2011-04-01"&gt;April 1, 2011</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &lt;div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating"&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>      &lt;meta itemprop="worstRating" content = "1"&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>      &lt;span itemprop="ratingValue"&gt;1&lt;/span&gt;/</span></span><br><span class="line"><span class="string"><span class="meta">... </span>      &lt;span itemprop="bestRating"&gt;5&lt;/span&gt;stars</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &lt;/div&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &lt;span itemprop="description"&gt;The lamp burned out and now I have to replace</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    it. &lt;/span&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  &lt;/div&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  &lt;div itemprop="review" itemscope itemtype="http://schema.org/Review"&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &lt;span itemprop="name"&gt;Value purchase&lt;/span&gt; -</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    by &lt;span itemprop="author"&gt;Lucas&lt;/span&gt;,</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &lt;meta itemprop="datePublished" content="2011-03-25"&gt;March 25, 2011</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &lt;div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating"&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>      &lt;meta itemprop="worstRating" content = "1"/&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>      &lt;span itemprop="ratingValue"&gt;4&lt;/span&gt;/</span></span><br><span class="line"><span class="string"><span class="meta">... </span>      &lt;span itemprop="bestRating"&gt;5&lt;/span&gt;stars</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &lt;/div&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &lt;span itemprop="description"&gt;Great microwave for the price. It is small and</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    fits in my apartment.&lt;/span&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  &lt;/div&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  ...</span></span><br><span class="line"><span class="string"><span class="meta">... </span>&lt;/div&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>"""</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sel = Selector(text=doc, type=<span class="string">"html"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> scope <span class="keyword">in</span> sel.xpath(<span class="string">'//div[@itemscope]'</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"current scope:"</span>, scope.xpath(<span class="string">'@itemtype'</span>).extract()</span><br><span class="line"><span class="meta">... </span>    props = scope.xpath(<span class="string">'''</span></span><br><span class="line"><span class="string"><span class="meta">... </span>                set:difference(./descendant::*/@itemprop,</span></span><br><span class="line"><span class="string"><span class="meta">... </span>                               .//*[@itemscope]/*/@itemprop)'''</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"    properties:"</span>, props.extract()</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span></span><br><span class="line"></span><br><span class="line">current scope: [<span class="string">u'http://schema.org/Product'</span>]</span><br><span class="line">    properties: [<span class="string">u'name'</span>, <span class="string">u'aggregateRating'</span>, <span class="string">u'offers'</span>, <span class="string">u'description'</span>, <span class="string">u'review'</span>, <span class="string">u'review'</span>]</span><br><span class="line"></span><br><span class="line">current scope: [<span class="string">u'http://schema.org/AggregateRating'</span>]</span><br><span class="line">    properties: [<span class="string">u'ratingValue'</span>, <span class="string">u'reviewCount'</span>]</span><br><span class="line"></span><br><span class="line">current scope: [<span class="string">u'http://schema.org/Offer'</span>]</span><br><span class="line">    properties: [<span class="string">u'price'</span>, <span class="string">u'availability'</span>]</span><br><span class="line"></span><br><span class="line">current scope: [<span class="string">u'http://schema.org/Review'</span>]</span><br><span class="line">    properties: [<span class="string">u'name'</span>, <span class="string">u'author'</span>, <span class="string">u'datePublished'</span>, <span class="string">u'reviewRating'</span>, <span class="string">u'description'</span>]</span><br><span class="line"></span><br><span class="line">current scope: [<span class="string">u'http://schema.org/Rating'</span>]</span><br><span class="line">    properties: [<span class="string">u'worstRating'</span>, <span class="string">u'ratingValue'</span>, <span class="string">u'bestRating'</span>]</span><br><span class="line"></span><br><span class="line">current scope: [<span class="string">u'http://schema.org/Review'</span>]</span><br><span class="line">    properties: [<span class="string">u'name'</span>, <span class="string">u'author'</span>, <span class="string">u'datePublished'</span>, <span class="string">u'reviewRating'</span>, <span class="string">u'description'</span>]</span><br><span class="line"></span><br><span class="line">current scope: [<span class="string">u'http://schema.org/Rating'</span>]</span><br><span class="line">    properties: [<span class="string">u'worstRating'</span>, <span class="string">u'ratingValue'</span>, <span class="string">u'bestRating'</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>首先，遍历了itemscope元素，针对每个itemscope查找itemprops并排除那些包含在其他itemscop中的itemprops。</p><p><strong>关于XPath的一些建议</strong><br><a href="https://blog.scrapinghub.com/2014/07/17/xpath-tips-from-the-web-scraping-trenches/?_ga=2.21172475.1955907946.1512143556-1857011771.1512143556" target="_blank" rel="noopener">一篇来自ScrapingHub的博客</a><br><a href="http://www.zvon.org/comp/r/tut-XPath_1.html" target="_blank" rel="noopener">XPath文档</a></p><p>使用text节点的时候需要注意，当你将text内容作为参数传递给XPath string function时，避免使用.//text()，用.代替即可。<br>因为表达式.//text()产生一个text元素的集合node-set,当node-set转换为string的时候，比如传递给contains()或starts-width()，将导致只会传递第一个元素的值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy <span class="keyword">import</span> Selector</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sel = Selector(text=<span class="string">'&lt;a href="#"&gt;Click here to go to the &lt;strong&gt;Next Page&lt;/strong&gt;&lt;/a&gt;'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sel.xpath(<span class="string">'//a//text()'</span>).extract() <span class="comment"># take a peek at the node-set</span></span><br><span class="line">[<span class="string">u'Click here to go to the '</span>, <span class="string">u'Next Page'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sel.xpath(<span class="string">"string(//a[1]//text())"</span>).extract() <span class="comment"># convert it to string</span></span><br><span class="line">[<span class="string">u'Click here to go to the '</span>]</span><br></pre></td></tr></table></figure></p><p>将一个node节点转换为string,将提取出该节点下的所有text<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sel.xpath(<span class="string">"//a[1]"</span>).extract() <span class="comment"># select the first node</span></span><br><span class="line">[<span class="string">u'&lt;a href="#"&gt;Click here to go to the &lt;strong&gt;Next Page&lt;/strong&gt;&lt;/a&gt;'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sel.xpath(<span class="string">"string(//a[1])"</span>).extract() <span class="comment"># convert it to string</span></span><br><span class="line">[<span class="string">u'Click here to go to the Next Page'</span>]</span><br></pre></td></tr></table></figure></p><p>所以，选择含有Next Page文本的a标签，如果这样写：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; sel.xpath(<span class="string">"//a[contains(.//text(),'Next Page')]"</span>).extract()</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></p><p>将不会有任何输出，因为原意是想先获取a的所有文本，然后检测是否包含’Next Page’,<br>但是此处的.//text()转换为string只会输出[u’Click here to go to the ‘],并不包含’Next Page’。所以，应该这样写：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; sel.xpath(<span class="string">"//a[contains(.,'Next Page')]"</span>).extract()</span><br><span class="line">[<span class="string">u'&lt;a href="#"&gt;Click here to go to the &lt;strong&gt;Next Page&lt;/strong&gt;&lt;/a&gt;'</span>]</span><br></pre></td></tr></table></figure></p><p>注意区分 //node[1] 和 (//node)[1]<br><code>//node[1]</code>选择所有匹配节点各自父节点的第一个子节点<br><code>(//node)[1]</code>选择文档中的所有匹配节点，然后返回第一个<br>例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy <span class="keyword">import</span> Selector</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sel = Selector(text=<span class="string">"""</span></span><br><span class="line"><span class="string">....:     &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">....:         &lt;li&gt;1&lt;/li&gt;</span></span><br><span class="line"><span class="string">....:         &lt;li&gt;2&lt;/li&gt;</span></span><br><span class="line"><span class="string">....:         &lt;li&gt;3&lt;/li&gt;</span></span><br><span class="line"><span class="string">....:     &lt;/ul&gt;</span></span><br><span class="line"><span class="string">....:     &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">....:         &lt;li&gt;4&lt;/li&gt;</span></span><br><span class="line"><span class="string">....:         &lt;li&gt;5&lt;/li&gt;</span></span><br><span class="line"><span class="string">....:         &lt;li&gt;6&lt;/li&gt;</span></span><br><span class="line"><span class="string">....:     &lt;/ul&gt;"""</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xp = <span class="keyword">lambda</span> x: sel.xpath(x).extract()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xp(<span class="string">"//li[1]"</span>)</span><br><span class="line">[<span class="string">u'&lt;li&gt;1&lt;/li&gt;'</span>, <span class="string">u'&lt;li&gt;4&lt;/li&gt;'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xp(<span class="string">"(//li)[1]"</span>)</span><br><span class="line">[<span class="string">u'&lt;li&gt;1&lt;/li&gt;'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xp(<span class="string">"//ul/li[1]"</span>)</span><br><span class="line">[<span class="string">u'&lt;li&gt;1&lt;/li&gt;'</span>, <span class="string">u'&lt;li&gt;4&lt;/li&gt;'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xp(<span class="string">"(//ul/li)[1]"</span>)</span><br><span class="line">[<span class="string">u'&lt;li&gt;1&lt;/li&gt;'</span>]</span><br></pre></td></tr></table></figure></p><p>使用class查询时，考虑使用CSS<br>因为一个元素能够包含多个css，XPath选择元素相对css来说是很冗长的：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*[contains(concat(' ', normalize-space(@class), ' '), ' someclass ')]</span><br></pre></td></tr></table></figure></p><p>如果你使用<code>@class=&#39;someclass&#39;</code>，将会丢失许多含有其他class的元素，如果使用<code>contains(@class,&#39;someclass&#39;)</code>，将有可能包含多余的class含有someclass子字符串的元素。<br>Scrapy允许链式调用selectors，所以你可以先用css选择然后再用xpath。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy <span class="keyword">import</span> Selector</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sel = Selector(text=<span class="string">'&lt;div class="hero shout"&gt;&lt;time datetime="2014-07-23 19:00"&gt;Special date&lt;/time&gt;&lt;/div&gt;'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sel.css(<span class="string">'.shout'</span>).xpath(<span class="string">'./time/@datetime'</span>).extract()</span><br><span class="line">[<span class="string">u'2014-07-23 19:00'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="内置的Selectors参考"><a href="#内置的Selectors参考" class="headerlink" title="内置的Selectors参考"></a>内置的Selectors参考</h3><h4 id="Selector-对象"><a href="#Selector-对象" class="headerlink" title="Selector 对象"></a>Selector 对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">selector</span>.<span class="title">Selector</span><span class="params">(response=None,text=None,type=None)</span></span></span><br></pre></td></tr></table></figure><p>Selector的实例是包装在response上用于提取指定的内容。<br><code>response</code>:一个 <code>HtmlResponse</code>或<code>XmlResponse</code>对象，用于选择和导出数据。<br><code>text</code>:unicode字符串或utf-8编码的文本，当<code>response</code>不存在的情况下。同时使用<code>text</code>和<code>response</code>是不可行的。<br><code>type</code>:定义选择器类型:”html”，”xml”或”None”(默认)</p><p>如果<code>type</code>为<code>None</code>时，选择器自动根据<code>response</code>选择最合适的类型，或如果类型为<code>text</code>时将默认为<code>&quot;html&quot;</code>。<br>如果<code>type</code>为<code>None</code>，传递了<code>response</code>，选择器类型将从<code>response</code>类型中推算：</p><ul><li><code>&quot;html&quot;</code>：<code>HtmlResponse</code></li><li><code>&quot;xml&quot;</code>：<code>XmlResponse</code></li><li><code>&quot;html&quot;</code>：anything</li></ul><p>否则，如果<code>type</code>设定了，选择器类型将被强制指定为type，不再进行检测。</p><blockquote><p>xpath(query)</p><p>css(query)</p><p>extract()</p><p>re(regex)</p><p>register_namespace(prefix,url)</p><p>remove_namespaces()</p><p><strong>nonzero</strong>()<br>是否选中内容</p></blockquote><h4 id="SelectorList-objects"><a href="#SelectorList-objects" class="headerlink" title="SelectorList objects"></a>SelectorList objects</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">selector</span>.<span class="title">SelectorList</span></span></span><br></pre></td></tr></table></figure><p><code>SelectorList</code>类是<code>list</code>的一个子类，提供了一些附加的方法。</p><blockquote><p>xpath(query)</p><p>css(query)</p><p>extract()</p><p>re()</p></blockquote><h4 id="基于HTML-Response的Selector例子"><a href="#基于HTML-Response的Selector例子" class="headerlink" title="基于HTML Response的Selector例子"></a>基于HTML Response的Selector例子</h4><p>假定sel是用一个<code>HtmlResponse</code>实例化的<code>Selector</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sel = Selector(html_response)</span><br><span class="line">sel.xpath(<span class="string">"//h1"</span>)</span><br><span class="line">sel.xpath(<span class="string">"//h1"</span>).extract()  <span class="comment"># includes h1</span></span><br><span class="line">sel.xpath(<span class="string">"//h1/text()"</span>).extract() <span class="comment"># excludes h1</span></span><br><span class="line"><span class="comment"># 遍历所有的p标签，打印它们的类属性</span></span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> sel.xpath(<span class="string">"//p"</span>):</span><br><span class="line">    <span class="keyword">print</span> node.xpath(<span class="string">"@class"</span>).extract()</span><br></pre></td></tr></table></figure></p><h4 id="基于XML-Response的Selector例子"><a href="#基于XML-Response的Selector例子" class="headerlink" title="基于XML Response的Selector例子"></a>基于XML Response的Selector例子</h4><p>假设sel是用<code>XmlResponse</code>实例化的<code>Selector</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sel = Selector(xml_response)</span><br><span class="line">sel.xpath(<span class="string">"//product"</span>)</span><br></pre></td></tr></table></figure></p><p>从指定文档提取所有价格，需要使用命名空间：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sel.register_namespace(<span class="string">"g"</span>,<span class="string">"http://base.google.com/ns/1.0"</span>)</span><br><span class="line">sel.xpath(<span class="string">"//g:price"</span>).extract()</span><br></pre></td></tr></table></figure></p><p><strong>移除命名空间</strong></p><p>在Scrapy项目中，为了写更多简单便捷的XPaths,经常需要移除命名空间，仅剩元素名称。<br><code>Selector.remove_namespaces()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; scrapy shell https://github.com/blog.atom</span><br><span class="line">&gt;&gt; response.xpath(<span class="string">"//link"</span>)</span><br><span class="line">[]</span><br><span class="line"><span class="comment"># 因为Atom XML命名空间扰乱了节点</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.selector.remove_namespaces()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">"//link"</span>)</span><br><span class="line">[&lt;Selector xpath=<span class="string">'//link'</span> data=<span class="string">u'&lt;link xmlns="http://www.w3.org/2005/Atom'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//link'</span> data=<span class="string">u'&lt;link xmlns="http://www.w3.org/2005/Atom'</span>&gt;,</span><br><span class="line"> ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>不默认移除命名空间的原因有二：</p><ol><li>移除命名空间需要遍历所有的文档，对于爬虫来说这是一个相当费时且昂贵的操作。</li><li>有些时候需要使用命名空间来避免名称冲突。</li></ol><h1 id="Items"><a href="#Items" class="headerlink" title="Items"></a>Items</h1><h2 id="声明Itmes"><a href="#声明Itmes" class="headerlink" title="声明Itmes"></a>声明Itmes</h2><p>使用class和<code>Field</code>对象来声明一个Item，如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line">Class Product(scrapy.Item):</span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    price = scrapy.Field()</span><br><span class="line">    stock = scrapy.Field()</span><br><span class="line">    last_updated = scrapy.Field(serializer=str)</span><br></pre></td></tr></table></figure></p><pre><code>注意：Scrapy中的Items定义和Django中Models定义很像，不同的是Items中没有多种字段类型，只有简单的`scrapy.Field`</code></pre><h2 id="Item-Fields"><a href="#Item-Fields" class="headerlink" title="Item Fields"></a>Item Fields</h2><p><code>Field</code>对象为每个字段指定metadata，例如上例中<code>last_updated</code>字段的serializer方法。</p><p>可以为每个字段指定任何类型的metadata,Field对象并没有限制接收的values，所以，这里并没有列出所有的<code>metadata keys</code>。在Field对象中定义的每个字段对应不同的功能，你也可以根据你的需要定义别的字段。<code>Field</code>对象的主要目标是提供一种在一个地方定义所有元数据(metadata)的方法。你可以查阅相关文档来使用metadata。</p><p>值得注意的是<code>Field</code>对象用来声明item字段的时候，该字段并不是作为类的属性，<br>相反，可以通过<code>Item.fields</code>(此处Item对应Product)属性来访问。(类似dict而不是object)</p><h2 id="使用Items"><a href="#使用Items" class="headerlink" title="使用Items"></a>使用Items</h2><p>这里有一些使用items的通用案例，使用上面声明的<code>Product</code>，你将会发现API非常类似<code>dict API</code></p><h3 id="创建items"><a href="#创建items" class="headerlink" title="创建items"></a>创建items</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>product = Product(name=<span class="string">'Desktop PC'</span>,price=<span class="number">1000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> product</span><br><span class="line">Product(name=<span class="string">'Desktop PC'</span>,price=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="获取字段值"><a href="#获取字段值" class="headerlink" title="获取字段值"></a>获取字段值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; product[<span class="string">'name'</span>]</span><br><span class="line">Desktop PC</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>product.get(<span class="string">'name'</span>)</span><br><span class="line">Desktop PC</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>product[<span class="string">'price'</span>]</span><br><span class="line"><span class="number">1000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>product[<span class="string">'last_updated'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    ...</span><br><span class="line">KeyError: <span class="string">'last_updated'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>product.get(<span class="string">'last_updated'</span>, <span class="string">'not set'</span>)</span><br><span class="line"><span class="keyword">not</span> set</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>product[<span class="string">'lala'</span>] <span class="comment"># getting unknown field</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    ...</span><br><span class="line">KeyError: <span class="string">'lala'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>product.get(<span class="string">'lala'</span>, <span class="string">'unknown field'</span>)</span><br><span class="line"><span class="string">'unknown field'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'name'</span> <span class="keyword">in</span> product  <span class="comment"># is name field populated?</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'last_updated'</span> <span class="keyword">in</span> product  <span class="comment"># is last_updated populated?</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'last_updated'</span> <span class="keyword">in</span> product.fields  <span class="comment"># is last_updated a declared field?</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'lala'</span> <span class="keyword">in</span> product.fields  <span class="comment"># is lala a declared field?</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h3 id="设置字段值"><a href="#设置字段值" class="headerlink" title="设置字段值"></a>设置字段值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>product[<span class="string">'last_updated'</span>] = <span class="string">'today'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>product[<span class="string">'last_updated'</span>]</span><br><span class="line">today</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>product[<span class="string">'lala'</span>] = <span class="string">'test'</span> <span class="comment"># setting unknown field</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    ...</span><br><span class="line">KeyError: <span class="string">'Product does not support field: lala'</span></span><br></pre></td></tr></table></figure><h3 id="访问所有值"><a href="#访问所有值" class="headerlink" title="访问所有值"></a>访问所有值</h3><p>类似使用字典的API<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>product.keys()</span><br><span class="line">[<span class="string">'price'</span>,<span class="string">'name'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>product.items()</span><br><span class="line">[(<span class="string">'price'</span>, <span class="number">1000</span>), (<span class="string">'name'</span>, <span class="string">'Desktop PC'</span>)]</span><br></pre></td></tr></table></figure></p><h3 id="其他通用的任务"><a href="#其他通用的任务" class="headerlink" title="其他通用的任务"></a>其他通用的任务</h3><p><strong>复制items</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>product2 = Product(product)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> product2</span><br><span class="line">Product(name=<span class="string">'Desktop PC'</span>, price=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>product3 = product2.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> product3</span><br><span class="line">Product(name=<span class="string">'Desktop PC'</span>, price=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></p><p><strong>items to dicts</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict(product) <span class="comment"># create a dict from all populated values</span></span><br><span class="line">&#123;<span class="string">'price'</span>: <span class="number">1000</span>, <span class="string">'name'</span>: <span class="string">'Desktop PC'</span>&#125;</span><br></pre></td></tr></table></figure></p><p><strong>dicts to items</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Product(&#123;<span class="string">'name'</span>: <span class="string">'Laptop PC'</span>, <span class="string">'price'</span>: <span class="number">1500</span>&#125;)</span><br><span class="line">Product(price=<span class="number">1500</span>, name=<span class="string">'Laptop PC'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Product(&#123;<span class="string">'name'</span>: <span class="string">'Laptop PC'</span>, <span class="string">'lala'</span>: <span class="number">1500</span>&#125;) <span class="comment"># warning: unknown field in dict</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    ...</span><br><span class="line">KeyError: <span class="string">'Product does not support field: lala'</span></span><br></pre></td></tr></table></figure></p><h2 id="扩展Items"><a href="#扩展Items" class="headerlink" title="扩展Items"></a>扩展Items</h2><p>可以通过继承Item来创建新的Item,以便增加字段或改变某些字段的信息。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiscountedProduct</span><span class="params">(Product)</span>:</span></span><br><span class="line">    discount_percent = scrapy.Field(serializer=str)</span><br><span class="line">    discount_expiration_date = scrapy.Field()</span><br></pre></td></tr></table></figure></p><p>你也可以使用前面定义的字段元数据来扩展字段元数据，添加或改变原来的值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpecificProduct</span><span class="params">(Product)</span>:</span></span><br><span class="line">    name = scrapy.Field(Product.fields[<span class="string">'name'</span>], serializer=my_serializer)</span><br></pre></td></tr></table></figure></p><p>此处扩展了Product的name字段的元数据，并在原来的基础上增加了serializer元数据。</p><h2 id="Item对象"><a href="#Item对象" class="headerlink" title="Item对象"></a>Item对象</h2><p><code>class scrapy.item.Item([arg])</code><br>    从所给的参数中返回一个可选的初始化Item。<br>    Items复制了标准的dict API,包括它的构造函数。只是添加了<code>fields</code>属性。</p><pre><code>&gt; fields        包含了所有声明字段的字典。字段的名称作为键，声明的`Field`对象作为值。</code></pre><h2 id="Field对象"><a href="#Field对象" class="headerlink" title="Field对象"></a>Field对象</h2><p><code>class scrapy.item.Field([arg])</code><br>    <code>Field</code>类只是内置dict类的一个别名，没有提供任何额外的功能或属性。换句话说Field只是普通的Python字典。一个单独用类属性来声明Item的类。</p><h1 id="Item-Loaders"><a href="#Item-Loaders" class="headerlink" title="Item Loaders"></a>Item Loaders</h1><p>Item Loaders为构建<code>scraped Itmes</code>提供了便捷的途径。即使能够使用Item的类字典API来构建，但是Item Loaders在爬取过程中提供了许多便捷的API来构建items，通过一些自动化的通用任务，比如:在分发之前解析原始提取到的数据。</p><p>换句话说，Items为爬取到的数据提供容器，而<code>Item Loaders</code>提供便捷的途径来构造这个容器。</p><p><code>Item Loaders</code>被设计为灵活、高效和简单的机制来扩展和覆盖不同字段的解析规则，无论是爬虫还是源格式(HTML，XML)维护起来都很方便。</p><h2 id="使用Item-Loaders来构建Items"><a href="#使用Item-Loaders来构建Items" class="headerlink" title="使用Item Loaders来构建Items"></a>使用Item Loaders来构建Items</h2><p>使用Item Loader前需要先实例化，你可以使用类字典(Item或者dict)或Item Loader构造器使用ItemLoader.default_item_class指定的属性来自动实例化Item。</p><p>然后，开始收集数据到Item Loader，通常使用Selectors。你可以添加多个值到相同的item字段，Item Loader会用合适的方法来处理。</p><p>这里有一个经典的Item Loader使用案例，使用前面章节定义的Product Item:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</span><br><span class="line"><span class="keyword">from</span> myproject.items <span class="keyword">import</span> Product</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self,response)</span>:</span></span><br><span class="line">    l = ItemLoader(item=Product(),response=response)</span><br><span class="line">    l.add_xpath(<span class="string">'name'</span>,<span class="string">'//div[@class="product_name"]'</span>)</span><br><span class="line">    l.add_xpath(<span class="string">'name'</span>,<span class="string">'//div[@class="product_title"]'</span>)</span><br><span class="line">    l.add_xpath(<span class="string">'price'</span>,<span class="string">'//p[@id="price"]'</span>)</span><br><span class="line">    l.add_css(<span class="string">'stock'</span>,<span class="string">'p#stock'</span>)</span><br><span class="line">    l.add_value(<span class="string">'last_updated'</span>,<span class="string">'today'</span>)</span><br><span class="line">    <span class="keyword">return</span> l.load_item()</span><br></pre></td></tr></table></figure></p><p>从上面的代码可以看到，name字段从不同的页面提取了2次：<br>1.<code>//div[@class=&quot;product_name&quot;]</code><br>2.<code>//div[@class=&quot;product_title&quot;]</code></p><p>换句话说，被指定给name字段的数据通过add_xpath()方法从2个XPath路径提取。</p><p>然后，同样的方法添加price和stock(stock使用CSS选择器add_css()方法添加)，最后用add_value直接给last_updated赋值’today’。</p><p>最后，当所有数据收集完成，<code>ItemLoader.load_item()</code>方法被调用，并返回用前面的<code>add_xpath()</code>,<code>add_css()</code>,<code>add_value()</code>提取的数据填充的item。</p><h2 id="输入输出处理"><a href="#输入输出处理" class="headerlink" title="输入输出处理"></a>输入输出处理</h2><p>每个Item Loader为每个Item 字段都有一个输入处理器和一个输出处理器。输入处理器在收到数据的时候通过<code>add_xpath()</code>,<code>add_css()</code>,<code>add_value()</code>方法尽快提取数据，输入处理器的处理结果将被收集并存储在ItemLoader中。待所有数据收集完成，<code>ItemLoader.load_item()</code>方法将被调用，构建并返回Item对象。此时，伴随着前面提取的数据输出处理器将被调用。输出处理器的结果将是Item的最终值。</p><p>下面通过一个例子来阐明输入、输出处理器针对特定字段是怎样被调用的(其他字段是同样的原理)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l = ItemLoader(Product(),some_selector)</span><br><span class="line">l.add_xpath(<span class="string">'name'</span>,xpath1) <span class="comment"># 1</span></span><br><span class="line">l.add_xpath(<span class="string">'name'</span>,xpath2) <span class="comment"># 2</span></span><br><span class="line">l.add_css(<span class="string">'name'</span>,css) <span class="comment"># 3</span></span><br><span class="line">l.add_value(<span class="string">'name'</span>,<span class="string">'test'</span>) <span class="comment"># 4</span></span><br><span class="line"><span class="keyword">return</span> l.load_item() <span class="comment"># 5</span></span><br></pre></td></tr></table></figure></p><ol><li>数据从<code>xpath1</code>被提取，然后传递给name字段的输入处理器，<br>输入处理器的结果被收集并保持在Item Loader中（并没有赋值给item)。</li><li>同上，数据提取后appended到1提取到的数据中。</li><li>同上，提取方法改变而已，数据提取后appended到1、2提取到的数据中。</li><li>同上，只是这里的value被转换为一个可迭代的元素，因为输入处理器只能接受可迭代的参数。数据提取后appended到1、2、3提取到的数据中。</li><li>1/2/3/4步中提取的数据被传递给输出处理器，输出处理器的结果将被赋值给item。</li></ol><p>值得注意的是，处理器只是可调用的对象，这些对象伴随着要解析的数据被调用，并返回一个已解析的值。因此，您可以使用任何函数作为输入或输出处理器。唯一的要求是它们必须接受一个(并且只有一个)可迭代的参数。</p><pre><code>注意：输入、输出处理器必须接受一个迭代器作为它的第一个参数。那些输出方法可任意，输入处理器的结果将被添加至一个内部的list(在Loader中)，包含收集到的该字段的值。输出处理器的值最终将被赋给item。</code></pre><p>最后，Scrapy自带了一些通用的处理器。</p><h2 id="声明Item-Loaders"><a href="#声明Item-Loaders" class="headerlink" title="声明Item Loaders"></a>声明Item Loaders</h2><p>Item Loaders像Items一样使用类定义语法来声明。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</span><br><span class="line"><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> TakeFirst,MapCompose,Join</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductLoader</span><span class="params">(ItemLoader)</span>:</span></span><br><span class="line">    defaule_output_processor = TakeFirst()</span><br><span class="line">    name_in = MapCompose(unicode.title)</span><br><span class="line">    name_out = Join()</span><br><span class="line">    price_in = MapCompose(unicode.strip)</span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure></p><p>如你所见，输入处理器使用<code>_in</code>后缀来声明，而输出处理器使用<code>_out</code>后缀。你也可以通过<code>ItemLoader.default_input_processor</code>和<code>ItemLoader.default_output_processor</code>定义默认的输入/输出处理器。</p><h2 id="定义输入输出处理器"><a href="#定义输入输出处理器" class="headerlink" title="定义输入输出处理器"></a>定义输入输出处理器</h2><p><a href="https://docs.scrapy.org/en/latest/topics/loaders.html#declaring-input-and-output-processors" target="_blank" rel="noopener">官网</a></p><p><span id="feed_export"></span></p><h1 id="Feed-exports"><a href="#Feed-exports" class="headerlink" title="Feed exports"></a>Feed exports</h1><blockquote><p>New in version 0.10.</p></blockquote><p>实现爬虫最常用的一个特性，用于存储爬取到的数据，通常会使用爬取到的数据生成一个“export file”（通常叫作“export feed”）。</p><p>Scrapy通过Feed Exports提供了开箱即用的功能，允许你将scraped items生成多种序列化的feed格式，并在后端存储。</p><h2 id="序列化格式"><a href="#序列化格式" class="headerlink" title="序列化格式"></a>序列化格式</h2><p>feed exports使用<a href="#item_exporters"><code>Item exporters</code></a>序列化爬取到的数据。这些格式开箱即用:</p><pre><code>- JSON- JSON lines- CSV- XML </code></pre><p>但是，你也可以扩展支持的格式，通过<code>FEED_EXPORTERS</code>设置。</p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><ul><li><code>FEED_FORMAT</code>:<code>json</code></li><li>Exporter used:<code>JsonItemExporter</code></li><li>JSON with large feeds.<a href="https://docs.scrapy.org/en/latest/topics/exporters.html#json-with-large-data" target="_blank" rel="noopener">warning</a></li></ul><h3 id="JSON-lines"><a href="#JSON-lines" class="headerlink" title="JSON lines"></a>JSON lines</h3><ul><li><code>FEED_FORMAT</code>:<code>jsonlines</code></li><li>Exporter used:<code>JsonLinesItemExporter</code></li></ul><h3 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h3><ul><li><code>FEED_FORMAT</code>:<code>csv</code></li><li>Exporter used:<code>CsvItemExporter</code></li><li>通过<code>FEED_EXPORT_FIELDS</code>指定导出的列和顺序。其他格式也可以使用这个选项，但是CSV不像其他格式，它使用的是固定的头部。</li></ul><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><ul><li><code>FEED_FORMAT</code>:<code>xml</code></li><li>Exporter used:<code>XmlItemExporter</code></li></ul><h3 id="Pickle"><a href="#Pickle" class="headerlink" title="Pickle"></a>Pickle</h3><ul><li><code>FEED_FORMAT</code>:<code>pickle</code></li><li>Exporter used:<code>PickleItemExporter</code></li></ul><h3 id="Marshal"><a href="#Marshal" class="headerlink" title="Marshal"></a>Marshal</h3><ul><li><code>FEED_FORMAT</code>:<code>marshal</code></li><li>Exporter used:<code>MarshalItemExporter</code></li></ul><h2 id="Storages"><a href="#Storages" class="headerlink" title="Storages"></a>Storages</h2><p>使用URI定义存储feed的位置(通过<code>FEED_URI</code>设置)。feed exports支持多种后端存储格式，通过URI方案定义。<br>后端开箱即用的存储格式：</p><ul><li>本地文件系统</li><li>FTP</li><li>S3(需要botocore 或 boto)</li><li>标准输出</li></ul><p>如果依赖的额外库不可用的话，有的后端存储将不可用。例如：S3后端只有当botocore和boto库都已安装才可用。(Scrapy只在Python 2上支持boto)</p><h3 id="Storage-URI参数"><a href="#Storage-URI参数" class="headerlink" title="Storage URI参数"></a>Storage URI参数</h3><p>存储URI还包含在创建是被替换的参数，被替换的参数如下：</p><ul><li><code>%(time)s</code> 当feed被创建时用时间戳替换</li><li><code>%(name)s%</code>被爬虫名称替换</li></ul><p>其他的参数将会被爬虫的同名属性替换，如<code>%(site_id)s</code>在feed被创建的时候将会被<code>spider.site_id</code>属性替换。</p><p>下面有一些例子来解释：</p><ul><li><p>使用FTP存储，每个爬虫一个目录</p><ul><li><code>ftp://user:password@ftp.example.com/scraping/feeds/%(name)s/%(time)s.json</code></li></ul></li><li><p>使用S3存储，每个爬虫一个目录   </p><ul><li><code>s3://mybucket/scraping/feeds/%(name)s/%(time)s.json</code></li></ul></li></ul><h2 id="Storage-backends"><a href="#Storage-backends" class="headerlink" title="Storage backends"></a>Storage backends</h2><h3 id="本地文件系统"><a href="#本地文件系统" class="headerlink" title="本地文件系统"></a>本地文件系统</h3><p>feeds存储在本地系统：</p><ul><li>URI scheme:文件</li><li>URI例子：<code>file:///tmp/export.csv</code></li><li>额外的库：none<br>注意：使用本地文件系统的时候，如果指定了绝对路径<code>(/tmp/export.csv)</code>，可以忽略<code>scheme</code>，但是仅在Unix系统上有效。</li></ul><h3 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h3><p>feeds存储在FTP服务器上</p><ul><li>URI shceme:<code>ftp</code></li><li>Example URL:<code>ftp://user:pass@ftp.example.com/path/to/export.csv</code></li><li>额外的库：none</li></ul><h3 id="S3"><a href="#S3" class="headerlink" title="S3"></a>S3</h3><p>feeds存储在Amazon S3上。</p><ul><li>URI scheme:<code>s3</code></li><li>Example URIs:<ul><li><code>s3://mybucket/path/to/export.csv</code></li><li><code>s3://aws_key:aws_secret@mybucket/path/to/export.csv</code></li></ul></li><li>需要额外的库：<code>botocore</code>或<code>boto</code></li></ul><p>AWS证书可以在URI中以<code>user/password</code>传输，或者可以通过以下设置传输：</p><ul><li>AWS_ACCESS_KEY_ID</li><li>AWS_SECRET_ACCESS_KEY</li></ul><h3 id="标准输出"><a href="#标准输出" class="headerlink" title="标准输出"></a>标准输出</h3><p>feeds被写进Scrapy进程的标准输出流中。</p><ul><li>URI scheme:<code>stdout</code></li><li>Example URI:<code>stdout:</code></li><li>需要额外的库：none</li></ul><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>feed导出配置项：</p><ul><li><code>FEED_URI</code>(强制的)</li><li><code>FEED_FORMAT</code></li><li><code>FEED_STORAGES</code></li><li><code>FEED_EXPORTERS</code></li><li><code>FEED_STORE_EMPTY</code></li><li><code>FEED_EXPORT_ENCODING</code></li><li><code>FEED_EXPORT_FIELDS</code></li><li><code>FEED_EXPORT_INDENT</code></li></ul><h4 id="FEED-URI"><a href="#FEED-URI" class="headerlink" title="FEED_URI"></a>FEED_URI</h4><p>默认：<code>None</code><br>导出feed的URI，关于URI schemes的资料查看<a href="">Storage backends</a><br>这个设置对于导出feed是必须的。</p><h4 id="FEED-FORMAT"><a href="#FEED-FORMAT" class="headerlink" title="FEED_FORMAT"></a>FEED_FORMAT</h4><p>序列化feed用的格式，查看[Serialization formats]</p><h4 id="FEED-EXPORT-ENCODING"><a href="#FEED-EXPORT-ENCODING" class="headerlink" title="FEED_EXPORT_ENCODING"></a>FEED_EXPORT_ENCODING</h4><p>Default:<code>None</code><br>被用于feed的编码</p><p>如果没有设置或设置为None，将使用UTF-8作为除了JSON格式输出的编码，JSON使用安全数字编码(\uXXXX序列)是有历史原因的。<br>如果你愿意，使用<code>utf-8</code>作为JSON编码格式也是可以的。</p><h4 id="FEED-EXPORT-FILEDS"><a href="#FEED-EXPORT-FILEDS" class="headerlink" title="FEED_EXPORT_FILEDS"></a>FEED_EXPORT_FILEDS</h4><p>Default:<code>None</code></p><p>被导出字段列表选项，例如:<br><code>FEED_EXPORT_FIELDS=[&quot;foo&quot;,&quot;bar&quot;,&quot;baz&quot;]</code></p><p>使用<code>FEED_EXPORT_FIELDS</code>选项来定义导出的字段和顺序。</p><p>当<code>FEED_EXPORT_FIELDS</code>是空的或None时，Scrapy使用在dicts中定义的字段或Item子类。</p><p>如果导出需要一个固定字段的集合(如：CSV)，但<code>FEED_EXPORT_FIELDS</code>是空或None时，Scrapy将通过导出数据推导字段名，目前使用第一个item的字段名。</p><h4 id="FEED-EXPORT-INDENT"><a href="#FEED-EXPORT-INDENT" class="headerlink" title="FEED_EXPORT_INDENT"></a>FEED_EXPORT_INDENT</h4><p>Default:<code>0</code><br>输出文件不同层级的缩进空格数量。如果<code>FEED_EXPORT_INDENT</code>是一个非负整数，然后数组元素和对象成员将按照设定的缩进进行展示。缩进级别为0或负数，将会输出每个item到新的行。<br>当前仅仅<code>JsonItemExporter</code>和<code>XmlItenExporter</code>可用。例如当你导出<code>.json</code>或<code>.xml</code>格式时。</p><h4 id="FEED-STORE-EMPTY"><a href="#FEED-STORE-EMPTY" class="headerlink" title="FEED_STORE_EMPTY"></a>FEED_STORE_EMPTY</h4><p>Default:<code>False</code><br>是否允许导出空的feeds(如：没有items的feeds)</p><h4 id="FEED-STORAGES"><a href="#FEED-STORAGES" class="headerlink" title="FEED_STORAGES"></a>FEED_STORAGES</h4><p>Default:<code>{}</code></p><p>项目提供的的额外feed存储后端支持。键为URI schemes，值为存储类的路径。</p><h5 id="FEED-STORAGES-BASE"><a href="#FEED-STORAGES-BASE" class="headerlink" title="FEED_STORAGES_BASE"></a>FEED_STORAGES_BASE</h5><p>Default:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">''</span>:<span class="string">'scrapy.extensions.feedexport.FileFeedStorage'</span>,</span><br><span class="line">    <span class="string">'file'</span>: <span class="string">'scrapy.extensions.feedexport.FileFeedStorage'</span>,</span><br><span class="line">    <span class="string">'stdout'</span>: <span class="string">'scrapy.extensions.feedexport.StdoutFeedStorage'</span>,</span><br><span class="line">    <span class="string">'s3'</span>: <span class="string">'scrapy.extensions.feedexport.S3FeedStorage'</span>,</span><br><span class="line">    <span class="string">'ftp'</span>: <span class="string">'scrapy.extensions.feedexport.FTPFeedStorage'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Scrapy内置的一个包含feed后端存储的字典。你可以在FEED_STORAGES中配置值为None来禁用一个选项。例如：禁用内置的FTP后端存储，不是替换，把下面的代码放入<code>settings.py</code>中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FEED_STORAGES=&#123;</span><br><span class="line">    <span class="string">'ftp'</span>:<span class="keyword">None</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="FEED-EXPORTERS"><a href="#FEED-EXPORTERS" class="headerlink" title="FEED_EXPORTERS"></a>FEED_EXPORTERS</h4><p>Default:{}<br>项目提供的额外exporters字典。键为序列化的格式，值为Item exporter类的路径。</p><h5 id="FEED-EXPORTERS-BASE"><a href="#FEED-EXPORTERS-BASE" class="headerlink" title="FEED_EXPORTERS_BASE"></a>FEED_EXPORTERS_BASE</h5><p>Default:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">'json'</span>: <span class="string">'scrapy.exporters.JsonItemExporter'</span>,</span><br><span class="line">    <span class="string">'jsonlines'</span>: <span class="string">'scrapy.exporters.JsonLinesItemExporter'</span>,</span><br><span class="line">    <span class="string">'jl'</span>: <span class="string">'scrapy.exporters.JsonLinesItemExporter'</span>,</span><br><span class="line">    <span class="string">'csv'</span>: <span class="string">'scrapy.exporters.CsvItemExporter'</span>,</span><br><span class="line">    <span class="string">'xml'</span>: <span class="string">'scrapy.exporters.XmlItemExporter'</span>,</span><br><span class="line">    <span class="string">'marshal'</span>: <span class="string">'scrapy.exporters.MarshalItemExporter'</span>,</span><br><span class="line">    <span class="string">'pickle'</span>: <span class="string">'scrapy.exporters.PickleItemExporter'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Scrapy提供的内置feed exporters字典。你可以在FEED_EXPORTERS中禁止某些exporters。例如：禁止内置的CSV exporter(而不是替换)，把下面的代码放入<code>settings.py</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FEED_EXPORTERS=&#123;</span><br><span class="line">    &apos;csv&apos;:None,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><span id="item_exporters"></span></p><h1 id="Item-Exporters"><a href="#Item-Exporters" class="headerlink" title="Item Exporters"></a>Item Exporters</h1><p>经常需要把爬取到的数据导出，以便其他应用使用，毕竟这是爬虫的目的。</p><p>Scrapy提供了一些不同导出格式(XML,CSV or JSON)的Item Exporters。</p><h2 id="使用Item-Exporters"><a href="#使用Item-Exporters" class="headerlink" title="使用Item Exporters"></a>使用Item Exporters</h2><p>如果你很忙，只是想用Item Exporter导出爬取到的数据，那么请看<a href="#feed_export"><code>Feed export</code></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://docs.scrapy.org/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Spiders&quot;&gt;&lt;a href=&quot;#Spiders&quot; class=&quot;headerlink&quot; title=&quot;Spiders&quot;&gt;&lt;/a&gt;Spiders&lt;/h1&gt;&lt;h2 id=&quot;通用爬虫-Generic-Spider&quot;&gt;&lt;a href=&quot;#通用爬虫-Generic-Spider&quot; class=&quot;headerlink&quot; title=&quot;通用爬虫(Generic Spider)&quot;&gt;&lt;/a&gt;通用爬虫(Generic Spider)&lt;/h2&gt;&lt;p&gt;Scrapy内置了一些通用的爬虫基类，你可以通过继承这些基类来快速构建自己的爬虫。这些内置爬虫基类提供了许多常用功能，比如：通过指定的规则，sitemaps或者xml/csv格式的feed文件爬取网站的链接。&lt;br&gt;接下来的例子，假定你已经创建了scrapy项目，在items.py&lt;br&gt;中申明TestItem类：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; scrapy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestItem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(scrapy.Item)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id = scrapy.Field()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name = scrapy.Field()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    description = scrapy.Field()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;CrawlSpider&quot;&gt;&lt;a href=&quot;#CrawlSpider&quot; class=&quot;headerlink&quot; title=&quot;CrawlSpider&quot;&gt;&lt;/a&gt;CrawlSpider&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;scrapy&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;spiders&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;CrawlSpider&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="后端" scheme="http://zongan.live/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Python" scheme="http://zongan.live/categories/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
      <category term="tech" scheme="http://zongan.live/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>pycharm</title>
    <link href="http://zongan.live/2018/08/17/pycharm/"/>
    <id>http://zongan.live/2018/08/17/pycharm/</id>
    <published>2018-08-17T06:08:57.586Z</published>
    <updated>2018-08-17T06:08:57.586Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Alt+Enter 自动添加包    </span><br><span class="line">shift+O 自动建议代码补全    </span><br><span class="line">Ctrl+t SVN更新  </span><br><span class="line">Ctrl+k SVN提交</span><br><span class="line">Ctrl + / 注释(取消注释)选择的行</span><br><span class="line">Ctrl+Shift+F 高级查找</span><br><span class="line">Ctrl+Enter 补全</span><br><span class="line">Shift + Enter 开始新行</span><br><span class="line">TAB Shift+TAB 缩进/取消缩进所选择的行</span><br><span class="line">Ctrl + Alt + I 自动缩进行</span><br><span class="line">Ctrl + Y 删除当前插入符所在的行</span><br><span class="line">Ctrl + D 复制当前行、或者选择的块</span><br><span class="line">Ctrl + Shift + J 合并行</span><br><span class="line">Ctrl + Shift + V 从最近的缓存区里粘贴</span><br><span class="line">Ctrl + Delete 删除到字符结尾</span><br><span class="line">Ctrl + Backspace 删除到字符的开始</span><br><span class="line">Ctrl + NumPad+/- 展开或者收缩代码块</span><br><span class="line">Ctrl + Shift + NumPad+ 展开所有的代码块</span><br><span class="line">Ctrl + Shift + NumPad- 收缩所有的代码块</span><br></pre></td></tr></table></figure><a id="more"></a><p>在PyCharm /opt/pycharm-3.4.1/help目录下可以找到ReferenceCard.pdf快捷键英文版说明</p><p>PyCharm Default Keymap<br>PyCharm3.0默认快捷键(翻译的)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1、编辑（Editing）</span><br><span class="line">Ctrl + Space 基本的代码完成（类、方法、属性）</span><br><span class="line">Ctrl + Alt + Space 快速导入任意类</span><br><span class="line">Ctrl + Shift + Enter 语句完成</span><br><span class="line">Ctrl + P 参数信息（在方法中调用参数）</span><br><span class="line">Ctrl + Q 快速查看文档</span><br><span class="line">Shift + F1 外部文档</span><br><span class="line">Ctrl + 鼠标 简介</span><br><span class="line">Ctrl + F1 显示错误描述或警告信息</span><br><span class="line">Alt + Insert 自动生成代码</span><br><span class="line">Ctrl + O 重新方法</span><br><span class="line">Ctrl + Alt + T 选中</span><br><span class="line">Ctrl + / 行注释</span><br><span class="line">Ctrl + Shift + / 块注释</span><br><span class="line">Ctrl + W 选中增加的代码块</span><br><span class="line">Ctrl + Shift + W 回到之前状态</span><br><span class="line">Ctrl + Shift + ]/[ 选定代码块结束、开始</span><br><span class="line">Alt + Enter 快速修正</span><br><span class="line">Ctrl + Alt + L 代码格式化</span><br><span class="line">Ctrl + Alt + O 优化导入</span><br><span class="line">Ctrl + Alt + I 自动缩进</span><br><span class="line">Tab / Shift + Tab 缩进、不缩进当前行</span><br><span class="line">Ctrl+X/Shift+Delete 剪切当前行或选定的代码块到剪贴板</span><br><span class="line">Ctrl+C/Ctrl+Insert 复制当前行或选定的代码块到剪贴板</span><br><span class="line">Ctrl+V/Shift+Insert 从剪贴板粘贴</span><br><span class="line">Ctrl + Shift + V 从最近的缓冲区粘贴</span><br><span class="line">Ctrl + D 复制选定的区域或行</span><br><span class="line">Ctrl + Y 删除选定的行</span><br><span class="line">Ctrl + Shift + J 添加智能线</span><br><span class="line">Ctrl + Enter 智能线切割</span><br><span class="line">Shift + Enter 另起一行</span><br><span class="line">Ctrl + Shift + U 在选定的区域或代码块间切换</span><br><span class="line">Ctrl + Delete 删除到字符结束</span><br><span class="line">Ctrl + Backspace 删除到字符开始</span><br><span class="line">Ctrl + Numpad+/- 展开折叠代码块</span><br><span class="line">Ctrl + Numpad+ 全部展开</span><br><span class="line">Ctrl + Numpad- 全部折叠</span><br><span class="line">Ctrl + F4 关闭运行的选项卡</span><br></pre></td></tr></table></figure></p><p>2、查找/替换(Search/Replace)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">F3 下一个</span><br><span class="line">Shift + F3 前一个</span><br><span class="line">Ctrl + R 替换</span><br><span class="line">Ctrl + Shift + F 全局查找</span><br><span class="line">Ctrl + Shift + R 全局替换</span><br></pre></td></tr></table></figure></p><p>3、运行(Running)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Alt + Shift + F10 运行模式配置</span><br><span class="line">Alt + Shift + F9 调试模式配置</span><br><span class="line">Shift + F10 运行</span><br><span class="line">Shift + F9 调试</span><br><span class="line">Ctrl + Shift + F10 运行编辑器配置</span><br><span class="line">Ctrl + Alt + R 运行manage.py任务</span><br></pre></td></tr></table></figure></p><p>4、调试(Debugging)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">F8 跳过</span><br><span class="line">F7 进入</span><br><span class="line">Shift + F8 退出</span><br><span class="line">Alt + F9 运行游标</span><br><span class="line">Alt + F8 验证表达式</span><br><span class="line">Ctrl + Alt + F8 快速验证表达式</span><br><span class="line">F9 恢复程序</span><br><span class="line">Ctrl + F8 断点开关</span><br><span class="line">Ctrl + Shift + F8 查看断点</span><br></pre></td></tr></table></figure></p><p>5、导航(Navigation)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + N 跳转到类</span><br><span class="line">Ctrl + Shift + N 跳转到符号</span><br><span class="line">Alt + Right/Left 跳转到下一个、前一个编辑的选项卡</span><br><span class="line">F12 回到先前的工具窗口</span><br><span class="line">Esc 从工具窗口回到编辑窗口</span><br><span class="line">Shift + Esc 隐藏运行的、最近运行的窗口</span><br><span class="line">Ctrl + Shift + F4 关闭主动运行的选项卡</span><br><span class="line">Ctrl + G 查看当前行号、字符号</span><br><span class="line">Ctrl + E 当前文件弹出</span><br><span class="line">Ctrl+Alt+Left/Right 后退、前进</span><br><span class="line">Ctrl+Shift+Backspace 导航到最近编辑区域</span><br><span class="line">Alt + F1 查找当前文件或标识</span><br><span class="line">Ctrl+B / Ctrl+Click 跳转到声明</span><br><span class="line">Ctrl + Alt + B 跳转到实现</span><br><span class="line">Ctrl + Shift + I查看快速定义</span><br><span class="line">Ctrl + Shift + B跳转到类型声明</span><br><span class="line">Ctrl + U跳转到父方法、父类</span><br><span class="line">Alt + Up/Down跳转到上一个、下一个方法</span><br><span class="line">Ctrl + ]/[跳转到代码块结束、开始</span><br><span class="line">Ctrl + F12弹出文件结构</span><br><span class="line">Ctrl + H类型层次结构</span><br><span class="line">Ctrl + Shift + H方法层次结构</span><br><span class="line">Ctrl + Alt + H调用层次结构</span><br><span class="line">F2 / Shift + F2下一条、前一条高亮的错误</span><br><span class="line">F4 / Ctrl + Enter编辑资源、查看资源</span><br><span class="line">Alt + Home显示导航条F11书签开关</span><br><span class="line">Ctrl + Shift + F11书签助记开关</span><br><span class="line">Ctrl + #[0-9]跳转到标识的书签</span><br><span class="line">Shift + F11显示书签</span><br></pre></td></tr></table></figure></p><p>6、搜索相关(Usage Search)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alt + F7/Ctrl + F7文件中查询用法</span><br><span class="line">Ctrl + Shift + F7文件中用法高亮显示</span><br><span class="line">Ctrl + Alt + F7显示用法</span><br></pre></td></tr></table></figure></p><p>7、重构(Refactoring)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">F5复制F6剪切</span><br><span class="line">Alt + Delete安全删除</span><br><span class="line">Shift + F6重命名</span><br><span class="line">Ctrl + F6更改签名</span><br><span class="line">Ctrl + Alt + N内联</span><br><span class="line">Ctrl + Alt + M提取方法</span><br><span class="line">Ctrl + Alt + V提取属性</span><br><span class="line">Ctrl + Alt + F提取字段</span><br><span class="line">Ctrl + Alt + C提取常量</span><br><span class="line">Ctrl + Alt + P提取参数</span><br></pre></td></tr></table></figure></p><p>8、控制VCS/Local History<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + K提交项目</span><br><span class="line">Ctrl + T更新项目</span><br><span class="line">Alt + Shift + C查看最近的变化</span><br><span class="line">Alt + BackQuote(’)VCS快速弹出</span><br></pre></td></tr></table></figure></p><p>9、模版(Live Templates)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Alt + J当前行使用模版</span><br><span class="line">Ctrl +Ｊ插入模版</span><br></pre></td></tr></table></figure></p><p>10、基本(General)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Alt + #[0-9]打开相应的工具窗口</span><br><span class="line">Ctrl + Alt + Y同步</span><br><span class="line">Ctrl + Shift + F12最大化编辑开关</span><br><span class="line">Alt + Shift + F添加到最喜欢</span><br><span class="line">Alt + Shift + I根据配置检查当前文件</span><br><span class="line">Ctrl + BackQuote(’)快速切换当前计划</span><br><span class="line">Ctrl + Alt + S　打开设置页</span><br><span class="line">Ctrl + Shift + A查找编辑器里所有的动作</span><br><span class="line">Ctrl + Tab在窗口间进行切换</span><br></pre></td></tr></table></figure></p><p>一些常用设置：</p><ol><li>pycharm默认是自动保存的，习惯自己按ctrl + s 的可以进行如下设置：<br> file -&gt; Setting -&gt; General -&gt; Synchronization -&gt; Save files on frame deactivation 和 Save files automatically if application is idle for .. sec 的勾去掉<br> file -&gt;Setting -&gt; Editor -&gt; Editor Tabs -&gt; Mark modified tabs with asterisk 打上勾</li><li>Alt + Enter: 自动添加包</li><li>对于常用的快捷键，可以设置为visual studio(eclipse…)一样的：<br>file -&gt; Setting -&gt; Keymap -&gt; Keymaps -&gt; vuisual studio -&gt; Apply</li><li>Pycharm中默认是不能用Ctrl+滚轮改变字体大小的，可以在file -&gt; Setting -&gt;Editor-〉Mouse中设置</li><li>要设置Pycharm的字体，要先在file -&gt; Setting -&gt;Editor-〉Editor中选择一种风格并保存，然后才可以改变</li><li>在setting中搜索theme可以改变主题，所有配色统一改变</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Alt+Enter 自动添加包    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shift+O 自动建议代码补全    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+t SVN更新  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+k SVN提交&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + / 注释(取消注释)选择的行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+Shift+F 高级查找&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+Enter 补全&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Shift + Enter 开始新行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TAB Shift+TAB 缩进/取消缩进所选择的行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + Alt + I 自动缩进行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + Y 删除当前插入符所在的行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + D 复制当前行、或者选择的块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + Shift + J 合并行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + Shift + V 从最近的缓存区里粘贴&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + Delete 删除到字符结尾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + Backspace 删除到字符的开始&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + NumPad+/- 展开或者收缩代码块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + Shift + NumPad+ 展开所有的代码块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + Shift + NumPad- 收缩所有的代码块&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="IDE" scheme="http://zongan.live/categories/IDE/"/>
    
    
      <category term="tech" scheme="http://zongan.live/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket(python端)</title>
    <link href="http://zongan.live/2018/08/17/WebSocket%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%88Python%EF%BC%89/"/>
    <id>http://zongan.live/2018/08/17/WebSocket服务端（Python）/</id>
    <published>2018-08-17T06:08:57.585Z</published>
    <updated>2018-08-17T06:08:57.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UDP通讯"><a href="#UDP通讯" class="headerlink" title="UDP通讯"></a>UDP通讯</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">port=8081</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">#从指定的端口，从任何发送者，接收UDP数据</span><br><span class="line">s.bind((&apos;&apos;,port))</span><br><span class="line">print(&apos;正在等待接入...&apos;)</span><br><span class="line">while True:</span><br><span class="line">    #接收一个数据</span><br><span class="line">    data,addr=s.recvfrom(1024)</span><br><span class="line">    print(&apos;Received:&apos;,data,&apos;from&apos;,addr)</span><br></pre></td></tr></table></figure><h1 id="TCP通讯"><a href="#TCP通讯" class="headerlink" title="TCP通讯"></a>TCP通讯</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#-*- coding: utf-8 -*-</span><br><span class="line">from socket import *</span><br><span class="line">from time import ctime</span><br><span class="line">from time import localtime</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">HOST=&apos;&apos;</span><br><span class="line">PORT=1122  #设置侦听端口</span><br><span class="line">BUFSIZ=1024</span><br><span class="line">ADDR=(HOST, PORT)</span><br><span class="line">sock=socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">sock.bind(ADDR)</span><br><span class="line"></span><br><span class="line">sock.listen(5)</span><br><span class="line">#设置退出条件</span><br><span class="line">STOP_CHAT=False</span><br><span class="line">while not STOP_CHAT:</span><br><span class="line">    print(&apos;等待接入，侦听端口:%d&apos; % (PORT))</span><br><span class="line">    tcpClientSock, addr=sock.accept()</span><br><span class="line">    print(&apos;接受连接，客户端地址：&apos;,addr)</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            data=tcpClientSock.recv(BUFSIZ)</span><br><span class="line">        except:</span><br><span class="line">            #print(e)</span><br><span class="line">            tcpClientSock.close()</span><br><span class="line">            break</span><br><span class="line">        if not data:</span><br><span class="line">            break</span><br><span class="line">        #python3使用bytes，所以要进行编码</span><br><span class="line">        #s=&apos;%s发送给我的信息是:[%s] %s&apos; %(addr[0],ctime(), data.decode(&apos;utf8&apos;))</span><br><span class="line">        #对日期进行一下格式化</span><br><span class="line">        ISOTIMEFORMAT=&apos;%Y-%m-%d %X&apos;</span><br><span class="line">        stime=time.strftime(ISOTIMEFORMAT, localtime())</span><br><span class="line">        s=&apos;%s发送给我的信息是:%s&apos; %(addr[0],data.decode(&apos;utf8&apos;))</span><br><span class="line">        tcpClientSock.send(s.encode(&apos;utf8&apos;))</span><br><span class="line">        print([stime], &apos;:&apos;, data.decode(&apos;utf8&apos;))</span><br><span class="line">        #如果输入quit(忽略大小写),则程序退出</span><br><span class="line">        STOP_CHAT=(data.decode(&apos;utf8&apos;).upper()==&quot;QUIT&quot;)</span><br><span class="line">        if STOP_CHAT:</span><br><span class="line">            break</span><br><span class="line">tcpClientSock.close()</span><br><span class="line">sock.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;UDP通讯&quot;&gt;&lt;a href=&quot;#UDP通讯&quot; class=&quot;headerlink&quot; title=&quot;UDP通讯&quot;&gt;&lt;/a&gt;UDP通讯&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
      <category term="网络通信" scheme="http://zongan.live/categories/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="tech" scheme="http://zongan.live/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>easyUI</title>
    <link href="http://zongan.live/2018/08/17/easyUI/"/>
    <id>http://zongan.live/2018/08/17/easyUI/</id>
    <published>2018-08-17T06:08:57.585Z</published>
    <updated>2018-08-17T06:08:57.585Z</updated>
    
    <content type="html"><![CDATA[<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li>layout</li><li>datagrid</li><li>tree</li><li>menu</li><li>panel</li><li>accordion</li><li>tabs</li></ul><a id="more"></a><h3 id="数据网格"><a href="#数据网格" class="headerlink" title="数据网格"></a>数据网格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//DataGrid</span><br><span class="line">&lt;table id=&quot;dg&quot; title=&quot;My Users&quot; class=&quot;easyui-datagrid&quot; style=&quot;width:550px;height:250px&quot; url=&quot;get_users.php&quot; toolbar=&quot;#toolbar&quot;rownumbers=&quot;true&quot; fitColumns=&quot;true&quot; singleSelect=&quot;true&quot;&gt;</span><br><span class="line">&lt;thead&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;th field=&quot;firstname&quot; width=&quot;50&quot;&gt;First Name&lt;/th&gt;</span><br><span class="line">    &lt;th field=&quot;lastname&quot; width=&quot;50&quot;&gt;Last Name&lt;/th&gt;</span><br><span class="line">    &lt;th field=&quot;phone&quot; width=&quot;50&quot;&gt;Phone&lt;/th&gt;</span><br><span class="line">    &lt;th field=&quot;email&quot; width=&quot;50&quot;&gt;Email&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/thead&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;div id=&quot;toolbar&quot;&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-add&quot; plain=&quot;true&quot; onclick=&quot;newUser()&quot;&gt;New User&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-edit&quot; plain=&quot;true&quot; onclick=&quot;editUser()&quot;&gt;Edit User&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-remove&quot; plain=&quot;true&quot; onclick=&quot;destroyUser()&quot;&gt;Remove User&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选中一行</span></span><br><span class="line"><span class="keyword">var</span> row = $(<span class="string">"#dg"</span>).datagrid(<span class="string">'getSelected'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用可编辑的数据网格</span></span><br><span class="line">$(<span class="string">'#dg'</span>).edatagrid(&#123;</span><br><span class="line">    url:<span class="string">''</span>,</span><br><span class="line">    saveUrl:<span class="string">''</span>,</span><br><span class="line">    updateUrl:<span class="string">''</span>,</span><br><span class="line">    destroyUrl:<span class="string">''</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#dg'</span>).edatagrid(<span class="string">'addRow'</span>);</span><br><span class="line">$(<span class="string">'#dg'</span>).edatagrid(<span class="string">'destroyRow'</span>);</span><br><span class="line">$(<span class="string">'#dg'</span>).edatagrid(<span class="string">'saveRow'</span>);</span><br><span class="line">$(<span class="string">'#dg'</span>).edatagrid(<span class="string">'cancelRow'</span>);</span><br></pre></td></tr></table></figure><h3 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;dlg&quot; class=&quot;easyui-dialog&quot; style=&quot;width:400px;height:280px;padding:10px 20px&quot;</span><br><span class="line">closed=&quot;true&quot; buttons=&quot;#dlg-buttons&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;dlg-buttons&quot;&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-ok&quot; onclick=&quot;saveUser()&quot;&gt;Save&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-cancel&quot; onclick=&quot;javascript:$(&apos;#dlg&apos;).dialog(&apos;close&apos;)&quot;&gt;Cancel&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打开窗口</span></span><br><span class="line">$(<span class="string">'#dlg'</span>).dialog(<span class="string">'open'</span>)</span><br><span class="line"><span class="comment">//设置标题</span></span><br><span class="line">$(<span class="string">'#dlg'</span>).dialog(<span class="string">'setTitle'</span>,<span class="string">'New User'</span>)</span><br></pre></td></tr></table></figure><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;ftitle&quot;&gt;User Information&lt;/div&gt;</span><br><span class="line">&lt;form id=&quot;fm&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;div class=&quot;fitem&quot;&gt;</span><br><span class="line">&lt;label&gt;First Name:&lt;/label&gt;</span><br><span class="line">&lt;input name=&quot;firstname&quot; class=&quot;easyui-validatebox&quot; required=&quot;true&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;fitem&quot;&gt;</span><br><span class="line">&lt;label&gt;Last Name:&lt;/label&gt;</span><br><span class="line">&lt;input name=&quot;lastname&quot; class=&quot;easyui-validatebox&quot; required=&quot;true&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;fitem&quot;&gt;</span><br><span class="line">&lt;label&gt;Phone:&lt;/label&gt;</span><br><span class="line">&lt;input name=&quot;phone&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;fitem&quot;&gt;</span><br><span class="line">&lt;label&gt;Email:&lt;/label&gt;</span><br><span class="line">&lt;input name=&quot;email&quot; class=&quot;easyui-validatebox&quot; validType=&quot;email&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//表单清空</span><br><span class="line">$(&quot;#fm&quot;).form(&apos;clear&apos;)</span><br><span class="line">//表单加载</span><br><span class="line">$(&apos;#fm&apos;).form(&apos;load&apos;,row)</span><br><span class="line">//提交表单</span><br><span class="line">$(&apos;#fm&apos;).form(&apos;submit&apos;,&#123;</span><br><span class="line">    url:&apos;&apos;,</span><br><span class="line">    onSubmit:function()&#123;</span><br><span class="line">        return $(this).form(&apos;validate&apos;);//验证表单</span><br><span class="line">    &#125;,</span><br><span class="line">    success:function(result)&#123;</span><br><span class="line">        var result = eval(&apos;(&apos;+result+&apos;)&apos;);</span><br><span class="line">        if(result.errorMsg)&#123;</span><br><span class="line">            $.messager.show(&#123;</span><br><span class="line">                title:&apos;error&apos;,</span><br><span class="line">                msg:result.errorMsg</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $(&apos;#dlg&apos;).dialog(&apos;close&apos;);</span><br><span class="line">            $(&apos;#dg&apos;).datagrid(&apos;reload&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//确认框</span><br><span class="line">$.messager.confirm(title,content,function(r)&#123;</span><br><span class="line">    if(r)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//提示框</span><br><span class="line">$.messager.show(&#123;</span><br><span class="line">    title:&apos;&apos;,</span><br><span class="line">    msg:&apos;&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;插件&quot;&gt;&lt;a href=&quot;#插件&quot; class=&quot;headerlink&quot; title=&quot;插件&quot;&gt;&lt;/a&gt;插件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;layout&lt;/li&gt;
&lt;li&gt;datagrid&lt;/li&gt;
&lt;li&gt;tree&lt;/li&gt;
&lt;li&gt;menu&lt;/li&gt;
&lt;li&gt;panel&lt;/li&gt;
&lt;li&gt;accordion&lt;/li&gt;
&lt;li&gt;tabs&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zongan.live/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="UI框架" scheme="http://zongan.live/categories/%E5%89%8D%E7%AB%AF/UI%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="tech" scheme="http://zongan.live/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket</title>
    <link href="http://zongan.live/2018/08/17/WebSocket/"/>
    <id>http://zongan.live/2018/08/17/WebSocket/</id>
    <published>2018-08-17T06:08:57.584Z</published>
    <updated>2018-08-17T06:08:57.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WebSocket协议的使用方法"><a href="#WebSocket协议的使用方法" class="headerlink" title="WebSocket协议的使用方法"></a>WebSocket协议的使用方法</h1><blockquote><p>引用自<a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="noopener">阮一峰的博客</a></p><p> http协议通信只能由客户端发起</p></blockquote><p><img src="http://7xosur.com1.z0.glb.clouddn.com//image/blog/http_problems.jpg" alt="image"></p><p>websocket没有产生之前，客户端要实时获取服务器状态，只能采用轮询的方式。应用场景：聊天室</p><blockquote><p>websocket诞生于2008年，2011年成为国际标准</p></blockquote><p>特点：服务器可以向客户端推送消息，客户端也可以向服务器推送，实现双向通信。属于服务器推送技术的一种。</p><h2 id="http和websocket的对比"><a href="#http和websocket的对比" class="headerlink" title="http和websocket的对比"></a>http和websocket的对比</h2><p><img src="http://7xosuw.com1.z0.glb.clouddn.com/image/blog/http_vs_socket.png" alt="image"></p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><p>1.建立在 TCP 协议之上，服务器端的实现比较容易。<br>2.与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。<br>3.数据格式比较轻量，性能开销小，通信高效。<br>4.可以发送文本，也可以发送二进制数据。<br>5.没有同源限制，客户端可以与任意服务器通信。<br>6.协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。   </p><h4 id="https和wss"><a href="#https和wss" class="headerlink" title="https和wss"></a>https和wss</h4><p><img src="http://7xosuw.com1.z0.glb.clouddn.com/image/blog/https_wss.jpg" alt="image"></p><a id="more"></a><h2 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var ws = new WebSocket(&quot;wss://echo.websocket.org&quot;);</span><br><span class="line"></span><br><span class="line">ws.onopen = function(evt) &#123; </span><br><span class="line">  console.log(&quot;Connection open ...&quot;); </span><br><span class="line">  ws.send(&quot;Hello WebSockets!&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onmessage = function(evt) &#123;</span><br><span class="line">  console.log( &quot;Received Message: &quot; + evt.data);</span><br><span class="line">  ws.close();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onclose = function(evt) &#123;</span><br><span class="line">  console.log(&quot;Connection closed.&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="客户端API"><a href="#客户端API" class="headerlink" title="客户端API"></a>客户端API</h3><p>1、WebSocket构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var ws =new WebSocket(&apos;ws://localhost:8080&apos;);</span><br></pre></td></tr></table></figure></p><p>ws所有的方法和属性参见<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket#Method_overview" target="_blank" rel="noopener">这里</a></p><p>2、WebSocket.readyState<br>共有四种：      </p><ul><li>CONNECTING：值为0，表示正在连接。       </li><li>OPEN：值为1，表示连接成功，可以通信了。     </li><li>CLOSING：值为2，表示连接正在关闭。      </li><li>CLOSED：值为3，表示连接已经关闭，或者打开连接失败。  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">switch (ws.readyState) &#123;</span><br><span class="line">  case WebSocket.CONNECTING:</span><br><span class="line">    // do something</span><br><span class="line">    break;</span><br><span class="line">  case WebSocket.OPEN:</span><br><span class="line">    // do something</span><br><span class="line">    break;</span><br><span class="line">  case WebSocket.CLOSING:</span><br><span class="line">    // do something</span><br><span class="line">    break;</span><br><span class="line">  case WebSocket.CLOSED:</span><br><span class="line">    // do something</span><br><span class="line">    break;</span><br><span class="line">  default:</span><br><span class="line">    // this never happens</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、WebSocket监听事件</p><ul><li><p>ws.onopen()<br>  指定连接成功后的回调函数</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ws.onopen = function()&#123;</span><br><span class="line">    ws.send(&apos;Hello Server!&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ws.onclose()<br>  指定关闭连接后的回调函数</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ws.onclose = function(evt)&#123;</span><br><span class="line">    var code = event.code;</span><br><span class="line">    var reason = event.reason;</span><br><span class="line">    var wasClean = event.wasClean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ws.onmessage()<br>  指定收到服务器数据后的回调函数</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ws.onmessage = function(event) &#123;</span><br><span class="line">    var data = event.data;</span><br><span class="line">    // 处理数据,有可能收到的是二进制数据</span><br><span class="line">    if(typeof data === String) &#123;</span><br><span class="line">        console.log(&quot;Received data string&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(data instanceof ArrayBuffer)&#123;</span><br><span class="line">        var buffer = data;</span><br><span class="line">        console.log(&quot;Received arraybuffer&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  除了动态判断收到的数据类型，也可以使用==binaryType==属性，显式指定收到的二进制数据类型。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 收到的是 blob 数据</span><br><span class="line">ws.binaryType = &quot;blob&quot;;</span><br><span class="line">ws.onmessage = function(e) &#123;</span><br><span class="line">  console.log(e.data.size);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 收到的是 ArrayBuffer 数据</span><br><span class="line">ws.binaryType = &quot;arraybuffer&quot;;</span><br><span class="line">ws.onmessage = function(e) &#123;</span><br><span class="line">  console.log(e.data.byteLength);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>ws.onerror()<br>  实例对象的onerror属性，用于指定报错时的回调函数。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">socket.onerror = function(event) &#123;</span><br><span class="line">  // handle error event</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>4、WebSocket的方法</p><ul><li>ws.send()<br>  实例对象的send()方法用于向服务器发送数据  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(1)发送文本</span><br><span class="line"></span><br><span class="line">    ws.send(&apos;your message&apos;);</span><br><span class="line"></span><br><span class="line">(2)发送Blob对象(发送文件)</span><br><span class="line"></span><br><span class="line">    var file = document</span><br><span class="line">      .querySelector(&apos;input[type=&quot;file&quot;]&apos;)</span><br><span class="line">      .files[0];</span><br><span class="line">    ws.send(file);</span><br><span class="line">    </span><br><span class="line">(3)发送ArrayBuffer对象(发送图片等二进制)</span><br><span class="line">    </span><br><span class="line">    // Sending canvas ImageData as ArrayBuffer</span><br><span class="line">    var img = canvas_context.getImageData(0, 0, 400, 320);</span><br><span class="line">    var binary = new Uint8Array(img.data.length);</span><br><span class="line">    for (var i = 0; i &lt; img.data.length; i++) &#123;</span><br><span class="line">      binary[i] = img.data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    ws.send(binary.buffer);</span><br></pre></td></tr></table></figure></li></ul><p>5、WebSocket.bufferedAmount<br>实例对象的bufferedAmount属性，表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var data = new ArrayBuffer(10000000);</span><br><span class="line">socket.send(data);</span><br><span class="line"></span><br><span class="line">if (socket.bufferedAmount === 0) &#123;</span><br><span class="line">  // 发送完毕</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  // 发送还没结束</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h2><p>查看<a href="https://en.wikipedia.org/wiki/Comparison_of_WebSocket_implementations" target="_blank" rel="noopener">wiki</a>文档</p><p>常见Node实现的三种方案：</p><ul><li><a href="https://github.com/uNetworking/uWebSockets" target="_blank" rel="noopener">µWebSockets</a></li><li><a href="https://socket.io/" target="_blank" rel="noopener">Socket.IO</a></li><li><a href="https://github.com/theturtle32/WebSocket-Node" target="_blank" rel="noopener">WebSocket-Node</a></li></ul><h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><p><a href="http://www.360doc.com/content/16/1228/09/1355383_618340627.shtml" target="_blank" rel="noopener">socket握手</a>         </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">配置：</span><br><span class="line">config = &#123;</span><br><span class="line">    &apos;HOST&apos;:&apos;127.0.0.1&apos;,</span><br><span class="line">    &apos;PORT&apos;:8888,</span><br><span class="line">    &apos;LISTEN_CLIENT&apos;:10,</span><br><span class="line">    &apos;KEY&apos;:&apos;391f10fadc339e9ec5fa15af60030ac1&apos;,</span><br><span class="line">    &apos;SIZE&apos;:1024,</span><br><span class="line">    &apos;GUID&apos;:&apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;,</span><br><span class="line">    &apos;TIME_OUT&apos;:1000,</span><br><span class="line">    &apos;HANDSHAKE_STRING&apos;:&quot;HTTP/1.1 101 Switching Protocols\r\n&quot; \</span><br><span class="line">                        &quot;Upgrade:websocket\r\n&quot; \</span><br><span class="line">                        &quot;Connection: Upgrade\r\n&quot; \</span><br><span class="line">                        &quot;Sec-WebSocket-Accept: &#123;1&#125;\r\n&quot; \</span><br><span class="line">                        &quot;WebSocket-Location: ws://&#123;2&#125;/chat\r\n&quot; \</span><br><span class="line">                        &quot;WebSocket-Protocol:chat\r\n\r\n&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、服务端创建和销毁socket</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">//TCP</span><br><span class="line"> ws = socket.socket(AF_INET,SOCK_STREAM)</span><br><span class="line">//UDP</span><br><span class="line"> ws = socket.socket(AF_INET,SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">//关闭socket</span><br><span class="line"> ws.close()</span><br><span class="line"> 或者</span><br><span class="line"> ws.shutdown(arg)</span><br><span class="line">    0:阻止socket 接收数据</span><br><span class="line">    1:阻止发送</span><br><span class="line">    2:阻止接收和发送</span><br></pre></td></tr></table></figure><p>2、绑定IP：端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//监听本地8080端口发过来的数据</span><br><span class="line">ws.bind(&apos;127.0.0.1&apos;,8080)</span><br><span class="line">//监听任何IP地址的8080端口</span><br><span class="line">ws.bind(&apos;&apos;,8080)</span><br></pre></td></tr></table></figure></p><p>3、监听<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//监听数量,这个数值表示在等待队列中允许放置的进来的连接总数。当等待队列已满时，如果有更多的连接到达，那么远程端将被告知连接被拒绝</span><br><span class="line">ws.listen(5)</span><br></pre></td></tr></table></figure></p><p>4、接收数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">循环监听</span><br><span class="line">white True:</span><br><span class="line">    #   接收数据，返回socket q(data) 和 地址v(ip:port)   </span><br><span class="line">    client,address = ws.accept()</span><br></pre></td></tr></table></figure></p><h3 id="Python实现客户端"><a href="#Python实现客户端" class="headerlink" title="Python实现客户端"></a>Python实现客户端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">client = socket.socket(AF_INET,SOCK_STREAM)</span><br><span class="line">client.connect((&apos;127.0.0.1&apos;,8080))</span><br></pre></td></tr></table></figure><p>通信：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ws.send(&apos;hello,I am Server!&apos;)</span><br><span class="line">//recv(bufsize[,flags]),</span><br><span class="line">flags:</span><br><span class="line">   MSG_OOB:处理带外数据（既TCP紧急数据）。</span><br><span class="line">   MSG_DONTROUTE:不使用路由表；直接发送到接口。</span><br><span class="line">   MSG_PEEK:返回等待的数据且不把它们从队列中删除。</span><br><span class="line">q.recv(1024)</span><br></pre></td></tr></table></figure></p><h2 id="WebSocketd"><a href="#WebSocketd" class="headerlink" title="WebSocketd"></a>WebSocketd</h2><p>WebSocket服务器：<a href="http://websocketd.com/" target="_blank" rel="noopener">WebSocketd</a></p><blockquote><p>后台脚本不限语言，标准输入（stdin）就是 WebSocket 的输入，标准输出（stdout）就是 WebSocket 的输出。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WebSocket协议的使用方法&quot;&gt;&lt;a href=&quot;#WebSocket协议的使用方法&quot; class=&quot;headerlink&quot; title=&quot;WebSocket协议的使用方法&quot;&gt;&lt;/a&gt;WebSocket协议的使用方法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;引用自&lt;a href=&quot;http://www.ruanyifeng.com/blog/2017/05/websocket.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰的博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; http协议通信只能由客户端发起&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7xosur.com1.z0.glb.clouddn.com//image/blog/http_problems.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;websocket没有产生之前，客户端要实时获取服务器状态，只能采用轮询的方式。应用场景：聊天室&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;websocket诞生于2008年，2011年成为国际标准&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;特点：服务器可以向客户端推送消息，客户端也可以向服务器推送，实现双向通信。属于服务器推送技术的一种。&lt;/p&gt;
&lt;h2 id=&quot;http和websocket的对比&quot;&gt;&lt;a href=&quot;#http和websocket的对比&quot; class=&quot;headerlink&quot; title=&quot;http和websocket的对比&quot;&gt;&lt;/a&gt;http和websocket的对比&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xosuw.com1.z0.glb.clouddn.com/image/blog/http_vs_socket.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;特点：&quot;&gt;&lt;a href=&quot;#特点：&quot; class=&quot;headerlink&quot; title=&quot;特点：&quot;&gt;&lt;/a&gt;特点：&lt;/h4&gt;&lt;p&gt;1.建立在 TCP 协议之上，服务器端的实现比较容易。&lt;br&gt;2.与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。&lt;br&gt;3.数据格式比较轻量，性能开销小，通信高效。&lt;br&gt;4.可以发送文本，也可以发送二进制数据。&lt;br&gt;5.没有同源限制，客户端可以与任意服务器通信。&lt;br&gt;6.协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。   &lt;/p&gt;
&lt;h4 id=&quot;https和wss&quot;&gt;&lt;a href=&quot;#https和wss&quot; class=&quot;headerlink&quot; title=&quot;https和wss&quot;&gt;&lt;/a&gt;https和wss&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7xosuw.com1.z0.glb.clouddn.com/image/blog/https_wss.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络通信" scheme="http://zongan.live/categories/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="tech" scheme="http://zongan.live/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text3快捷键大全</title>
    <link href="http://zongan.live/2018/08/17/SublimeText3%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://zongan.live/2018/08/17/SublimeText3快捷键/</id>
    <published>2018-08-17T06:08:57.583Z</published>
    <updated>2018-08-17T06:08:57.583Z</updated>
    
    <content type="html"><![CDATA[<p>基础命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+Shift+P：打开命令面板</span><br><span class="line">Ctrl+P：搜索项目中的文件</span><br><span class="line">Ctrl+G：跳转到第几行</span><br><span class="line">Ctrl+W：关闭当前打开文件</span><br><span class="line">Ctrl+Shift+W：关闭所有打开文件</span><br><span class="line">Ctrl+Shift+V：粘贴并格式化</span><br><span class="line">Ctrl+D：选择单词，重复可增加选择下一个相同的单词</span><br><span class="line">Ctrl+L：选择行，重复可依次增加选择下一行</span><br><span class="line">Ctrl+Shift+L：选择多行</span><br><span class="line">Ctrl+Shift+Enter：在当前行前插入新行</span><br><span class="line">Ctrl+X：删除当前行</span><br><span class="line">Ctrl+M：跳转到对应括号</span><br><span class="line">Ctrl+U：软撤销，撤销光标位置</span><br><span class="line">Ctrl+J：选择标签内容</span><br><span class="line">Ctrl+F：查找内容</span><br><span class="line">Ctrl+Shift+F：查找并替换</span><br><span class="line">Ctrl+H：替换</span><br><span class="line">Ctrl+R：前往 method</span><br><span class="line">Ctrl+N：新建窗口</span><br><span class="line">Ctrl+K+B：开关侧栏</span><br><span class="line">Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身</span><br><span class="line">Ctrl+F2：设置/删除标记</span><br><span class="line">Ctrl+/：注释当前行</span><br><span class="line">Ctrl+Shift+/：当前位置插入注释</span><br><span class="line">Ctrl+Alt+/：块注释，并Focus到首行，写注释说明用的</span><br><span class="line">Ctrl+Shift+A：选择当前标签前后，修改标签用的</span><br><span class="line">F11：全屏</span><br><span class="line">Shift+F11：全屏免打扰模式，只编辑当前文件</span><br><span class="line">Alt+F3：选择所有相同的词</span><br><span class="line">Alt+.：闭合标签</span><br><span class="line">Alt+Shift+数字：分屏显示</span><br><span class="line">Alt+数字：切换打开第N个文件</span><br><span class="line">Shift+右键拖动：光标多不，用来更改或插入列内容</span><br><span class="line">鼠标的前进后退键可切换Tab文件</span><br><span class="line">按Ctrl，依次点击或选取，可需要编辑的多个位置</span><br><span class="line">按Ctrl+Shift+上下键，可替换行</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>选择类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。</span><br><span class="line"></span><br><span class="line">Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。</span><br><span class="line"></span><br><span class="line">Ctrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。</span><br><span class="line"></span><br><span class="line">Ctrl+M 光标移动至括号内结束或开始的位置。</span><br><span class="line"></span><br><span class="line">Ctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+[ 选中代码，按下快捷键，折叠代码。</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+] 选中代码，按下快捷键，展开代码。</span><br><span class="line"></span><br><span class="line">Ctrl+K+0 展开所有折叠代码。</span><br><span class="line"></span><br><span class="line">Ctrl+← 向左单位性地移动光标，快速移动光标。</span><br><span class="line"></span><br><span class="line">Ctrl+→ 向右单位性地移动光标，快速移动光标。</span><br><span class="line"></span><br><span class="line">shift+↑ 向上选中多行。</span><br><span class="line"></span><br><span class="line">shift+↓ 向下选中多行。</span><br><span class="line"></span><br><span class="line">Shift+← 向左选中文本。</span><br><span class="line"></span><br><span class="line">Shift+→ 向右选中文本。</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+← 向左单位性地选中文本。</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+→ 向右单位性地选中文本。</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。</span><br><span class="line"></span><br><span class="line">Ctrl+Alt+↑ 向上添加多行光标，可同时编辑多行。</span><br><span class="line"></span><br><span class="line">Ctrl+Alt+↓ 向下添加多行光标，可同时编辑多行。</span><br></pre></td></tr></table></figure></p><p>编辑类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+D 复制光标所在整行，插入到下一行。</span><br><span class="line"></span><br><span class="line">Tab 向右缩进。</span><br><span class="line"></span><br><span class="line">Shift+Tab 向左缩进。</span><br><span class="line"></span><br><span class="line">Ctrl+K+K 从光标处开始删除代码至行尾。</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+K 删除整行。</span><br><span class="line"></span><br><span class="line">Ctrl+/ 注释单行。</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+/ 注释多行。</span><br><span class="line"></span><br><span class="line">Ctrl+K+U 转换大写。</span><br><span class="line"></span><br><span class="line">Ctrl+K+L 转换小写。</span><br><span class="line"></span><br><span class="line">Ctrl+Z 撤销。</span><br><span class="line"></span><br><span class="line">Ctrl+Y 恢复撤销。</span><br><span class="line"></span><br><span class="line">Ctrl+U 软撤销，感觉和 Gtrl+Z 一样。</span><br><span class="line"></span><br><span class="line">Ctrl+F2 设置书签</span><br><span class="line"></span><br><span class="line">Ctrl+T 左右字母互换。</span><br><span class="line"></span><br><span class="line">F6 单词检测拼写</span><br></pre></td></tr></table></figure></p><p>搜索类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+F 打开底部搜索框，查找关键字。</span><br><span class="line"></span><br><span class="line">Ctrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。</span><br><span class="line"></span><br><span class="line">Ctrl+P 打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。</span><br><span class="line"></span><br><span class="line">Ctrl+G 打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。</span><br><span class="line"></span><br><span class="line">Ctrl+R 打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。</span><br><span class="line"></span><br><span class="line">Ctrl+： 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+P 打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。</span><br><span class="line"></span><br><span class="line">Esc 退出光标多行选择，退出搜索框，命令框等。</span><br></pre></td></tr></table></figure></p><p>显示类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+Tab 按文件浏览过的顺序，切换当前窗口的标签页。</span><br><span class="line"></span><br><span class="line">Ctrl+PageDown 向左切换当前窗口的标签页。</span><br><span class="line"></span><br><span class="line">Ctrl+PageUp 向右切换当前窗口的标签页。</span><br><span class="line"></span><br><span class="line">Alt+Shift+1 窗口分屏，恢复默认1屏（非小键盘的数字）</span><br><span class="line"></span><br><span class="line">Alt+Shift+2 左右分屏-2列</span><br><span class="line"></span><br><span class="line">Alt+Shift+3 左右分屏-3列</span><br><span class="line">Alt+Shift+4 左右分屏-4列</span><br><span class="line"></span><br><span class="line">Alt+Shift+5 等分4屏</span><br><span class="line"></span><br><span class="line">Alt+Shift+8 垂直分屏-2屏</span><br><span class="line"></span><br><span class="line">Alt+Shift+9 垂直分屏-3屏</span><br><span class="line"></span><br><span class="line">Ctrl+K+B 开启/关闭侧边栏。</span><br><span class="line"></span><br><span class="line">F11 全屏模式</span><br><span class="line"></span><br><span class="line">Shift+F11 免打扰模式</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基础命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+Shift+P：打开命令面板&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+P：搜索项目中的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+G：跳转到第几行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+W：关闭当前打开文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+Shift+W：关闭所有打开文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+Shift+V：粘贴并格式化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+D：选择单词，重复可增加选择下一个相同的单词&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+L：选择行，重复可依次增加选择下一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+Shift+L：选择多行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+Shift+Enter：在当前行前插入新行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+X：删除当前行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+M：跳转到对应括号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+U：软撤销，撤销光标位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+J：选择标签内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+F：查找内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+Shift+F：查找并替换&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+H：替换&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+R：前往 method&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+N：新建窗口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+K+B：开关侧栏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+F2：设置/删除标记&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+/：注释当前行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+Shift+/：当前位置插入注释&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+Alt+/：块注释，并Focus到首行，写注释说明用的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+Shift+A：选择当前标签前后，修改标签用的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F11：全屏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Shift+F11：全屏免打扰模式，只编辑当前文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Alt+F3：选择所有相同的词&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Alt+.：闭合标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Alt+Shift+数字：分屏显示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Alt+数字：切换打开第N个文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Shift+右键拖动：光标多不，用来更改或插入列内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;鼠标的前进后退键可切换Tab文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;按Ctrl，依次点击或选取，可需要编辑的多个位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;按Ctrl+Shift+上下键，可替换行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IDE" scheme="http://zongan.live/categories/IDE/"/>
    
    
      <category term="tech" scheme="http://zongan.live/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>React</title>
    <link href="http://zongan.live/2018/08/17/React/"/>
    <id>http://zongan.live/2018/08/17/React/</id>
    <published>2018-08-17T06:08:57.583Z</published>
    <updated>2018-08-17T06:08:57.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React核心"><a href="#React核心" class="headerlink" title="React核心"></a>React核心</h1><ul><li>elements</li><li><p>components</p><h1 id="React常有两种用途"><a href="#React常有两种用途" class="headerlink" title="React常有两种用途"></a>React常有两种用途</h1></li><li><p>创建新的APP</p></li><li>在现有APP上增加React</li></ul><h2 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--node &gt;= 6--&gt;</span><br><span class="line">npm install -g create-react-app</span><br><span class="line">create-react-app my-app</span><br><span class="line"></span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--node &gt;= 5.2--&gt;</span><br><span class="line">npx create-react-app my-app</span><br><span class="line"></span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><h3 id="发布app"><a href="#发布app" class="headerlink" title="发布app"></a>发布app</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h2 id="添加React到现有APP"><a href="#添加React到现有APP" class="headerlink" title="添加React到现有APP"></a>添加React到现有APP</h2><p>当React运行在没有build pipeline的环境中，你至少需要下面的几个工具：</p><ul><li>包管理工具：Yarn、npm</li><li>打包工具：webpack、Browserify</li><li>编译工具：Babel</li></ul><a id="more"></a><h1 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h1><p>可以在JS中写html代码，而不用转变为字符串。  </p><h4 id="js的表达式用-括起来"><a href="#js的表达式用-括起来" class="headerlink" title="js的表达式用{}括起来"></a>js的表达式用{}括起来</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = &lt;h1&gt;Hello, &#123;this.props.name&#125;!&lt;/h1&gt;;</span><br></pre></td></tr></table></figure><h4 id="为了JSX具有可读性，可写成多行，用-括起来"><a href="#为了JSX具有可读性，可写成多行，用-括起来" class="headerlink" title="为了JSX具有可读性，可写成多行，用()括起来"></a>为了JSX具有可读性，可写成多行，用()括起来</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;h1&gt;</span><br><span class="line">    Hello, &#123;formatName(user)&#125;!</span><br><span class="line">  &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h4 id="JSX依然是表达式，可用于if、for的语句中，也可赋值给变量，传给参数，当作函数返回值。"><a href="#JSX依然是表达式，可用于if、for的语句中，也可赋值给变量，传给参数，当作函数返回值。" class="headerlink" title="JSX依然是表达式，可用于if、for的语句中，也可赋值给变量，传给参数，当作函数返回值。"></a>JSX依然是表达式，可用于if、for的语句中，也可赋值给变量，传给参数，当作函数返回值。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function getGreeting(user) &#123;</span><br><span class="line">  if (user) &#123;</span><br><span class="line">    return &lt;h1&gt;Hello, &#123;formatName(user)&#125;!&lt;/h1&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">  return &lt;h1&gt;Hello, Stranger.&lt;/h1&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="给JSX指定属性"><a href="#给JSX指定属性" class="headerlink" title="给JSX指定属性"></a>给JSX指定属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = &lt;div tabIndex="0"&gt;&lt;/div&gt;;</span><br><span class="line"><span class="keyword">const</span> element = &lt;img src=&#123;user.avatarUrl&#125;&gt;&lt;/img&gt;;</span><br></pre></td></tr></table></figure><p>==注意：不可在花括号外加引号，引号和花括号不能同时使用。==</p><p>JSX使用驼峰命名属性</p><h4 id="给JSX指定子元素"><a href="#给JSX指定子元素" class="headerlink" title="给JSX指定子元素"></a>给JSX指定子元素</h4><p>单标签元素要闭合<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = &lt;img src=&#123;user.avatarUrl&#125; /&gt;;</span><br></pre></td></tr></table></figure></p><p>JSX标签可包含子标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--多行用括号括起来--&gt;</span><br><span class="line">const element = (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;Good to see you here.&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h4 id="JSX防注入"><a href="#JSX防注入" class="headerlink" title="JSX防注入"></a>JSX防注入</h4><p>在JSX语法中，插入用户输入是安全的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const title = response.potentiallyMaliciousInput;</span><br><span class="line">// This is safe:</span><br><span class="line">const element = &lt;h1&gt;&#123;title&#125;&lt;/h1&gt;;</span><br></pre></td></tr></table></figure></p><p>在渲染之前，React DOM默认转义了所有插入JSX的值，所有的值都被转义成了字符串。这样可有效的防止跨站脚本攻击XSS（cross-site-scripting）attacks.</p><h4 id="JSX代表对象"><a href="#JSX代表对象" class="headerlink" title="JSX代表对象"></a>JSX代表对象</h4><p>Babel将JSX编译成React.createElement()函数调用。<br>下面两种写法完全等价：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> = (</span><br><span class="line">  &lt;h1 className=<span class="string">"greeting"</span>&gt;</span><br><span class="line">    Hello, world!</span><br><span class="line">  &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const element = React.createElement(</span><br><span class="line">  &apos;h1&apos;,</span><br><span class="line">  &#123;className: &apos;greeting&apos;&#125;,</span><br><span class="line">  &apos;Hello, world!&apos;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">//本质</span><br><span class="line">// Note: this structure is simplified</span><br><span class="line">const element = &#123;</span><br><span class="line">  type: &apos;h1&apos;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    className: &apos;greeting&apos;,</span><br><span class="line">    children: &apos;Hello, world&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">这就是React elements,React读取这些对象去构建DOM</span><br></pre></td></tr></table></figure><p>2017-11-2<br><a href="https://reactjs.org/docs/rendering-elements.html" target="_blank" rel="noopener">传送门</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React核心&quot;&gt;&lt;a href=&quot;#React核心&quot; class=&quot;headerlink&quot; title=&quot;React核心&quot;&gt;&lt;/a&gt;React核心&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;elements&lt;/li&gt;
&lt;li&gt;&lt;p&gt;components&lt;/p&gt;
&lt;h1 id=&quot;React常有两种用途&quot;&gt;&lt;a href=&quot;#React常有两种用途&quot; class=&quot;headerlink&quot; title=&quot;React常有两种用途&quot;&gt;&lt;/a&gt;React常有两种用途&lt;/h1&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建新的APP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;在现有APP上增加React&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;创建app&quot;&gt;&lt;a href=&quot;#创建app&quot; class=&quot;headerlink&quot; title=&quot;创建app&quot;&gt;&lt;/a&gt;创建app&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!--node &amp;gt;= 6--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install -g create-react-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;create-react-app my-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd my-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!--node &amp;gt;= 5.2--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npx create-react-app my-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd my-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;发布app&quot;&gt;&lt;a href=&quot;#发布app&quot; class=&quot;headerlink&quot; title=&quot;发布app&quot;&gt;&lt;/a&gt;发布app&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm run build&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;添加React到现有APP&quot;&gt;&lt;a href=&quot;#添加React到现有APP&quot; class=&quot;headerlink&quot; title=&quot;添加React到现有APP&quot;&gt;&lt;/a&gt;添加React到现有APP&lt;/h2&gt;&lt;p&gt;当React运行在没有build pipeline的环境中，你至少需要下面的几个工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包管理工具：Yarn、npm&lt;/li&gt;
&lt;li&gt;打包工具：webpack、Browserify&lt;/li&gt;
&lt;li&gt;编译工具：Babel&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zongan.live/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript框架" scheme="http://zongan.live/categories/%E5%89%8D%E7%AB%AF/JavaScript%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="tech" scheme="http://zongan.live/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>swig语法</title>
    <link href="http://zongan.live/2018/08/17/Swig/"/>
    <id>http://zongan.live/2018/08/17/Swig/</id>
    <published>2018-08-17T06:08:57.583Z</published>
    <updated>2018-08-17T06:08:57.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、起航"><a href="#一、起航" class="headerlink" title="一、起航"></a>一、起航</h1><h2 id="1、API"><a href="#1、API" class="headerlink" title="1、API"></a>1、API</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">swig.init(&#123;</span><br><span class="line">    allowErrors: false,</span><br><span class="line">    autoescape: true,</span><br><span class="line">    cache: true,</span><br><span class="line">    encoding: &apos;utf8&apos;,</span><br><span class="line">    filters: &#123;&#125;,</span><br><span class="line">    root: &apos;/&apos;,</span><br><span class="line">    tags: &#123;&#125;,</span><br><span class="line">    extensions: &#123;&#125;,</span><br><span class="line">    tzOffset: 0</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="options"><a href="#options" class="headerlink" title="options:"></a><strong>options:</strong></h3><ul><li>allowErrors: 默认值为 false。将所有模板解析和编译错误直接输出到模板。如果为 true，则将引发错误，抛出到 Node.js 进程中，可能会使您的应用程序崩溃。 </li><li>autoescape: 默认true，强烈建议保持。字符转换表请参阅转义过滤器。<br>  true: HTML安全转义<br>  false: 不转义，除非使用转义过滤器或者转义标签<br>  ‘js’: js安全转义</li><li>cache: 更改为 false 将重新编译每个请求的模板的文件。正式环境建议保持true。</li><li>encoding: 模板文件编码</li><li>root: 需要搜索模板的目录。如果模板传递给 swig.compileFile 绝对路径(以/开头)，Swig不会在模板root中搜索。如果传递一个数组，使用第一个匹配成功的数组项。</li><li>tzOffset: 设置默认时区偏移量。此设置会使转换日期过滤器会自动的修正相应时区偏移量。</li><li>filters:自定义过滤器或者重写默认过滤器，参见自定义过滤器指南。<br>tags: 自定义标签或者重写默认标签，参见自定义标签指南。<br>extensions: 添加第三方库，可以在编译模板时使用，参见参见自定义标签指南。</li></ul><h2 id="2、node-js"><a href="#2、node-js" class="headerlink" title="2、node.js"></a>2、node.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var tpl = swig.compileFile(&quot;path/to/template/file.html&quot;);</span><br><span class="line">var renderedHtml = tpl.render(&#123; vars: &apos;to be inserted in template&apos; &#125;);</span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">var tpl = swig.compile(&quot;Template string here&quot;);</span><br><span class="line">var renderedHtml = tpl(&#123; vars: &apos;to be inserted in template&apos; &#125;);</span><br></pre></td></tr></table></figure><h2 id="3、结合Express"><a href="#3、结合Express" class="headerlink" title="3、结合Express"></a>3、结合Express</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install express</span><br><span class="line">npm install consolidate</span><br><span class="line"></span><br><span class="line">然后</span><br><span class="line"></span><br><span class="line">app.engine(&apos;.html&apos;,cons.swig);</span><br><span class="line">app.set(&apos;view engine&apos;,html);</span><br></pre></td></tr></table></figure><h2 id="4、浏览器"><a href="#4、浏览器" class="headerlink" title="4、浏览器"></a>4、浏览器</h2><p>Swig浏览器版本的api基本与nodejs版相同，不同点如下：</p><ul><li>不能使用swig.compileFile，浏览器没有文件系统    </li><li>你必须提前使用swig.compile编译好模板    </li><li>按顺序使用extends, import, and include，同时在swig.compile里使用参数templateKey来查找模板  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var template = swig.compile(&apos;&lt;p&gt;&#123;% block content %&#125;&#123;% endblock %&#125;&lt;/p&gt;&apos;, &#123; filename: &apos;main&apos; &#125;);</span><br><span class="line">var mypage = swig.compile(&apos;&#123;% extends &quot;main&quot; %&#125;&#123;% block content %&#125;Oh hey there!&#123;% endblock %&#125;&apos;, &#123; filename: &apos;mypage&apos; &#125;);</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="二、基础"><a href="#二、基础" class="headerlink" title="二、基础"></a>二、基础</h1><h2 id="1、变量"><a href="#1、变量" class="headerlink" title="1、变量"></a>1、变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;foo.bar&#125;&#125;或&#123;&#123;foo[&apos;bar&apos;]&#125;&#125;</span><br></pre></td></tr></table></figure><p>如果变量未定义，输出空字符串<br>变量可以通过过滤器来修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; name|title &#125;&#125; was born on &#123;&#123; birthday|date(&apos;F jS, Y&apos;) &#125;&#125;</span><br><span class="line">// Jane was born on July 6th, 1985</span><br></pre></td></tr></table></figure></p><h2 id="2、逻辑标签"><a href="#2、逻辑标签" class="headerlink" title="2、逻辑标签"></a>2、逻辑标签</h2><h2 id="3、注释"><a href="#3、注释" class="headerlink" title="3、注释"></a>3、注释</h2><h2 id="4、空白"><a href="#4、空白" class="headerlink" title="4、空白"></a>4、空白</h2><p>模板里的空白在最终输出时默认保留，如果需要去掉空白，可以在逻辑标签前后加上空白控制符’—‘：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for item in seq -%&#125;</span><br><span class="line">    &#123;&#123;item&#125;&#125;</span><br><span class="line">&#123;%- endfor%&#125;</span><br></pre></td></tr></table></figure></p><hr><h1 id="三、模板继承"><a href="#三、模板继承" class="headerlink" title="三、模板继承"></a>三、模板继承</h1><p>Swig使用extends和block来实现模板继承<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--layout.html--&gt;</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&#123;% block title %&#125;My Site&#123;% endblock %&#125;&lt;/title&gt;</span><br><span class="line">    &#123;% block head%&#125;</span><br><span class="line">        &lt;link rel=&quot;stylesheet&quot; href=&quot;main.css&quot;&gt;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;% block content%&#125;&#123;%endblock%&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--index.html--&gt;</span><br><span class="line">&#123;%extends &apos;layout.html&apos;%&#125;</span><br><span class="line">&#123;%block title%&#125;My Page&#123;%endblock%&#125;</span><br><span class="line">&#123;%block head%&#125;</span><br><span class="line">    &#123;%parent%&#125;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;custom.css&quot;&gt;</span><br><span class="line">&#123;%endblock%&#125;</span><br><span class="line">&#123;%block content%&#125;</span><br><span class="line">    &lt;p&gt;This is just a simple page.&lt;/p&gt;</span><br><span class="line">&#123;%endblock%&#125;</span><br></pre></td></tr></table></figure></p><hr><h1 id="四、变量过滤器"><a href="#四、变量过滤器" class="headerlink" title="四、变量过滤器"></a>四、变量过滤器</h1><p>用于修改变量。变量名称后用“|”字符分隔添加过滤器。也可以添加多个过滤器。</p><h2 id="1、例子"><a href="#1、例子" class="headerlink" title="1、例子"></a>1、例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; name|title &#125;&#125; was born on &#123;&#123;birthday|date(&apos;F jS,Y&apos;)&#125;&#125;</span><br><span class="line">and has &#123;&#123; bikes|length|default(&quot;zero&quot;)&#125;&#125; bikes.</span><br></pre></td></tr></table></figure><p>也可以使用==filter标签==来为块内容添加过滤器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% filter upper %&#125;oh hi,swig!&#123;% endfilter %&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2、内置过滤器"><a href="#2、内置过滤器" class="headerlink" title="2、内置过滤器"></a>2、内置过滤器</h2><ul><li>add(value):使变量与value相加，数值字符串会自动转换为数值</li><li>addslashes:用\转义字符串</li><li>caplitalize:大写首字母</li><li>data(format[,tzOffset]):转换日期为指定格式</li><li>format:格式</li><li>tzOffset:时区</li><li>default(value):默认值</li><li>escape([type]):转义字符<ul><li>默认: &amp;,&lt;,&gt;,”,’</li><li>js：&amp;,&lt;,&gt;,”,’,=,-,;</li></ul></li><li>first: 返回数组第一个值</li><li>join(glue):同[].join</li><li>json_encode([indent]):类似JSON.stringfy,indent为缩进空格数</li><li>last:返回数组最后一个值</li><li>length:返回变量的length,如果是object，返回key的数量</li><li>lower:同’’.toLowerCase()</li><li>raw:指定输入不会被转义</li><li>replace(search,replace[,flags]):同’’.replace</li><li>reverse:翻转数组</li><li>striptags:去除html/xml标签</li><li>title:大写首字母</li><li>uniq:数组去重</li><li>upper:同’’.toUpperCase</li><li>url_encode:同encodeURIComponent</li><li>url_decode:同decodeURIComponent</li></ul><h2 id="3、自定义过滤器"><a href="#3、自定义过滤器" class="headerlink" title="3、自定义过滤器"></a>3、自定义过滤器</h2><p>创建一个myfilter.js然后引入到Swig的初始化函数中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swig.init(&#123;filters:require(&apos;myfilter&apos;)&#125;);</span><br></pre></td></tr></table></figure></p><p>在myfilter.js里，每一个filter方法都是一个简单的js方法，下例是一个翻转字符串的filter:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exports.myfilter = function(input)&#123;</span><br><span class="line">    return input.toString().split(&apos;&apos;).reverse().join(&apos;&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.prefix = function(input,prefix)&#123;</span><br><span class="line">    return prefix.toString() + input.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; name|myfilter &#125;&#125;</span><br><span class="line">或者</span><br><span class="line">&#123;% filter myfilter %&#125;</span><br><span class="line">    I shall be filtered</span><br><span class="line">&#123;% endfilter %&#125;</span><br></pre></td></tr></table></figure></p><p>过滤器传参：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--字符串--&gt;</span><br><span class="line">&#123;&#123; name|prefix(&apos;hello &apos;) &#125;&#125;</span><br><span class="line">或者</span><br><span class="line">&#123;%filter prefix &apos;hello &apos;%&#125; yang &#123;% endfilter %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--变量--&gt;</span><br><span class="line">&#123;% filter prefix foo %&#125;I will be prefixed with the value stored to `foo`.&#123;% endfilter %&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4、标签"><a href="#4、标签" class="headerlink" title="4、标签"></a>4、标签</h2><ul><li>extends: 使当前模板继承父模板，必须在文件最前面<ul><li>参数file:父模板相对模板root的相对路径</li></ul></li><li>block:定义一个块，使之可以被继承的模板重写，或者重写父模板的同名块<ul><li>参数name:定义一个块，使之可以被继承的模板重写，或者重写父模板的同名块</li></ul></li><li>parent:将父模块中同名块注入当前块中</li><li>include:包含一个模板到当前位置，这个模板将使用当前上下文<ul><li>参数file:包含模板相对模板root的相对路径</li><li>参数ignore missing:包含模板不存在也不会报错</li><li>参数with x:设置x至根上下文对象以传递给模板生成。必须是一个键值对</li><li>参数only:限制模板上下文中用with x定义的参数</li></ul></li></ul><blockquote><p>本地申明的上下文变量，默认情况下不会传递给包含的模板。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set foo = &quot;bar&quot; %&#125;</span><br><span class="line">&#123;% include &quot;inc.html&quot; %&#125;</span><br><span class="line">&#123;% for bar in thing %&#125;</span><br><span class="line">    &#123;% include &quot;inc.html&quot; %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><pre><code>错误:inc.html无法得到foo和bar</code></pre><blockquote><p>  如果想把本地申明的变量引入到包含的模板中，可以使用with参数来把后面的对象创建到包含模板的上下文中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set foo = &#123; bar: &quot;baz&quot; &#125; %&#125;</span><br><span class="line">&#123;% include &quot;inc.html&quot; with foo %&#125;</span><br><span class="line">&#123;% for bar in thing %&#125;</span><br><span class="line">    &#123;% include &quot;inc.html&quot; with bar %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  如果当前上下文中foo和bar可用，下面的情况，只有foo会被inc.html定义</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &quot;inc.html&quot; with foo only %&#125;</span><br></pre></td></tr></table></figure><pre><code>only 必须作为最后一个参数，放在其他位置会被忽略。</code></pre><ul><li>raw：停止解析标记中的任何内容，所有内容将原样输出<ul><li>file:父模板相对模板 root 的相对路径</li></ul></li><li><p>for:遍历对象和数组</p><ul><li>x:当前循环迭代名</li><li>in:语法标记</li><li><p>y:可迭代对象。可以使用过滤器修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for x in y %&#125;    </span><br><span class="line">    &#123;% if loop.first %&#125;&lt;ul&gt;&#123;% endif %&#125;    </span><br><span class="line">        &lt;li&gt;&#123;&#123; loop.index &#125;&#125; - &#123;&#123; loop.key &#125;&#125;: &#123;&#123; x &#125;&#125;&lt;/li&gt;     </span><br><span class="line">    &#123;% if loop.last %&#125;&lt;/ul&gt;&#123;% endif %&#125;  </span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p> loop.index：当前循环的索引（1开始）<br>    loop.index0：当前循环的索引（0开始）<br>    loop.revindex：当前循环从结尾开始的索引（1开始）<br>    loop.revindex0：当前循环从结尾开始的索引（0开始）<br>    loop.key：如果迭代是对象，是当前循环的键，否则同 loop.index<br>    loop.first：如果是第一个值返回 true<br>    loop.last：如果是最后一个值返回 true<br>    loop.cycle：一个帮助函数，以指定的参数作为周期<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">loop.cycle()     循环设置奇偶行的样式</span><br><span class="line">&#123;% for item in items %&#125;</span><br><span class="line">    &lt;li class=&quot;&#123;&#123; loop.cycle(&apos;odd&apos;, &apos;even&apos;) &#125;&#125;&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>在for标签里使用else，当people为undefined或null时执行else</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for person in people %&#125;</span><br><span class="line">    &#123;&#123; person &#125;&#125;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    There are no people yet!</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><ul><li><p>if：条件语句</p><ul><li><p>参数:接受任何有效的javasript条件语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if x %&#125;&#123;% endif %&#125;</span><br><span class="line">&#123;% if !x %&#125;&#123;% endif %&#125;</span><br><span class="line">&#123;% if not x %&#125;&#123;% endif %&#125;</span><br><span class="line">&#123;% if x and y %&#125;&#123;% endif %&#125;</span><br><span class="line">&#123;% if x &amp;&amp; y %&#125;&#123;% endif %&#125;</span><br><span class="line">&#123;% if x &amp;&amp; y %&#125;&#123;% endif %&#125;</span><br><span class="line">&#123;% if x or y %&#125;&#123;% endif %&#125;</span><br><span class="line">&#123;% if x || y %&#125;&#123;% endif %&#125;</span><br><span class="line">&#123;% if x || (y &amp;&amp; z) %&#125;&#123;% endif %&#125;</span><br><span class="line">&#123;% if x [operator] y %&#125;</span><br><span class="line">    Operators: ==, !=, &lt;, &lt;= , &gt;, &gt;=, ===, !==</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% if x == &apos;five&apos; %&#125;</span><br><span class="line">    The operands can be also be string or number literals</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% if x|length === 3 %&#125;</span><br><span class="line">    You can use filters on any operand in the statement.</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% if x in y %&#125;</span><br><span class="line">    If x is a value that is present in y, this will return true.</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>else和else if</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% if foo %&#125;</span><br><span class="line">    Some content.</span><br><span class="line">&#123;% else if &quot;foo&quot; in bar %&#125;</span><br><span class="line">    Content if the array `bar` has &quot;foo&quot; in it.</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    Fallback content.</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>autoescape：改变当前变量的自动转义行为</p><ul><li>on：当前内容是否转义Boolean</li><li>type：转义类型，js或者html，默认html</li></ul></li></ul><p>假设<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">some_html_output = &apos;&lt;p&gt;Hello &quot;you&quot; &amp; \&apos;them\&apos;&lt;/p&gt;&apos;;</span><br></pre></td></tr></table></figure></p><p>然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% autoescape false %&#125;</span><br><span class="line">    &#123;&#123; some_html_output &#125;&#125;</span><br><span class="line">&#123;% endautoescape %&#125;</span><br><span class="line">&#123;% autoescape true %&#125;</span><br><span class="line">    &#123;&#123; some_html_output &#125;&#125;</span><br><span class="line">&#123;% endautoescape %&#125;</span><br><span class="line">&#123;% autoescape true &quot;js&quot; %&#125;</span><br><span class="line">    &#123;&#123; some_html_output &#125;&#125;</span><br><span class="line">&#123;% endautoescape %&#125;</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Hello &quot;you&quot; &amp; &apos;them&apos;&lt;/p&gt;</span><br><span class="line"> &amp;lt;p&amp;gt;Hello &amp;quot;you&amp;quot; &amp;amp; &amp;#39;them&amp;#39; &amp;lt;/p&amp;gt;</span><br><span class="line"> \u003Cp\u003EHello \u0022you\u0022 &amp; \u0027them\u0027\u003C\u005Cp\u003E</span><br></pre></td></tr></table></figure></p><ul><li>set：设置一个变量,在当前上下文中复用<ul><li>name:变量名</li><li>=语法标记</li><li>value:变量值</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set foo = [0, 1, 2, 3, 4, 5] %&#125; &#123;% for num in foo %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; num &#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><ul><li>macro:创建自定义可复用的代码段<ul><li>参数…:用户自定义</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro input type name id label value error %&#125;</span><br><span class="line"> &lt;label for=&quot;&#123;&#123; name &#125;&#125;&quot;&gt;&#123;&#123; label &#125;&#125;&lt;/label&gt;</span><br><span class="line"> &lt;input type=&quot;&#123;&#123; type &#125;&#125;&quot; name=&quot;&#123;&#123; name &#125;&#125;&quot; id=&quot;&#123;&#123; id &#125;&#125;&quot; value=&quot;&#123;&#123; value &#125;&#125;&quot;&#123;% if error %&#125; class=&quot;error&quot;&#123;% endif %&#125;&gt;</span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure><p>使用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;&#123; input(&quot;text&quot;, &quot;fname&quot;, &quot;fname&quot;, &quot;First Name&quot;, fname.value, fname.errors) &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;&#123; input(&quot;text&quot;, &quot;lname&quot;, &quot;lname&quot;, &quot;Last Name&quot;, lname.value, lname.errors) &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;fname&quot;&gt;First Name&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;fname&quot; id=&quot;fname&quot; value=&quot;Paul&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;lname&quot;&gt;Last Name&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;lname&quot; id=&quot;lname&quot; value=&quot;&quot; class=&quot;error&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><ul><li>import：允许引入另一个模板的宏进入当前上下文  <ul><li>file:引入模板相对模板root的相对路径</li><li>as:语法标记</li><li>var:分配给宏的可访问上下文对象</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &apos;formmacros.html&apos; as form %&#125;  </span><br><span class="line">&#123;# this will run the input macro #&#125;</span><br><span class="line">&#123;&#123; form.input(&quot;text&quot;, &quot;name&quot;) &#125;&#125;</span><br><span class="line">&#123;# this, however, will NOT output anything because the macro is scoped to the &quot;form&quot;     object: #&#125;</span><br><span class="line">&#123;&#123; input(&quot;text&quot;, &quot;name&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>filter:对整个块应用过滤器<ul><li>filter_name:过滤器名字</li><li>…:若干传给过滤器的参数</li></ul></li></ul><blockquote><p>  使用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% filter uppercase %&#125;</span><br><span class="line">    oh hi, &#123;&#123; name &#125;&#125;</span><br><span class="line">&#123;% endfilter %&#125;</span><br><span class="line">&#123;% filter replace &quot;.&quot; &quot;!&quot; &quot;g&quot; %&#125;</span><br><span class="line">    Hi. My name is Paul.</span><br><span class="line">&#123;% endfilter %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  输出</p></blockquote><pre><code>OH HI, PAUL Hi! My name is Paul!</code></pre><ul><li>spaceless:尝试移出html标签间的空格</li></ul><blockquote><p>使用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% spaceless %&#125;</span><br><span class="line">&#123;% for num in foo %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; loop.index &#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endspaceless %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  输出</p></blockquote><pre><code>&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、起航&quot;&gt;&lt;a href=&quot;#一、起航&quot; class=&quot;headerlink&quot; title=&quot;一、起航&quot;&gt;&lt;/a&gt;一、起航&lt;/h1&gt;&lt;h2 id=&quot;1、API&quot;&gt;&lt;a href=&quot;#1、API&quot; class=&quot;headerlink&quot; title=&quot;1、API&quot;&gt;&lt;/a&gt;1、API&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;swig.init(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    allowErrors: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    autoescape: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cache: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    encoding: &amp;apos;utf8&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filters: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    root: &amp;apos;/&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tags: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    extensions: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tzOffset: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zongan.live/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="模板引擎" scheme="http://zongan.live/categories/%E5%89%8D%E7%AB%AF/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="tech" scheme="http://zongan.live/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>Django REST FrameWork</title>
    <link href="http://zongan.live/2018/08/17/Django%20REST%20FrameWork/"/>
    <id>http://zongan.live/2018/08/17/Django REST FrameWork/</id>
    <published>2018-08-17T06:08:57.581Z</published>
    <updated>2018-08-17T06:08:57.581Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h3><p>REST framework有以下要求：</p><ul><li>Python(2.7,3.2,3.3,3.4,3.5)</li><li>Django(1.7+,1.8,1.9)</li></ul><p>可选的包：</p><ul><li>Markdown(2.1.0+) -为可视化API提供支持</li><li>django-filter(0.9.2+)-过滤支持</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br><span class="line">pip install markdown</span><br><span class="line">pip install django-filter</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:tomchristie/django-rest-framework.git</span><br></pre></td></tr></table></figure></p><h3 id="注册APP"><a href="#注册APP" class="headerlink" title="注册APP"></a>注册APP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS=(</span><br><span class="line">    ...,</span><br><span class="line">    &apos;snippets&apos;,</span><br><span class="line">    &apos;rest_framework&apos;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="可视化API"><a href="#可视化API" class="headerlink" title="可视化API"></a>可视化API</h3><p>添加REST framework的登录/登出视图。在根urls.py文件中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    ...,</span><br><span class="line">    url(r&apos;/api-auth&apos;,include(&apos;rest_framework.urls&apos;,namespace=&apos;rest_framework&apos;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>setting.py模块中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    # 使用Django的标准`django.contrib.auth`权限管理类,</span><br><span class="line">    # 或者为尚未认证的用户，赋予只读权限.</span><br><span class="line">    &apos;DEFAULT_PERMISSION_CLASSES&apos;: [</span><br><span class="line">        &apos;rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly&apos;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="开始REST"><a href="#开始REST" class="headerlink" title="开始REST"></a>开始REST</h3><h4 id="新建模型"><a href="#新建模型" class="headerlink" title="新建模型"></a>新建模型</h4><p>snippets/models.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> get_all_lexers</span><br><span class="line"><span class="keyword">from</span> pygments.styles <span class="keyword">import</span> get_all_styles</span><br><span class="line"></span><br><span class="line">LEXERS = [item <span class="keyword">for</span> item <span class="keyword">in</span> get_all_lexers() <span class="keyword">if</span> item[<span class="number">1</span>]]</span><br><span class="line">LANGUAGE_CHOICE = sorted([(item[<span class="number">1</span>][<span class="number">0</span>], item[<span class="number">0</span>]) <span class="keyword">for</span> item <span class="keyword">in</span> LEXERS])</span><br><span class="line">STYLE_CHOICE = sorted([(item, item) <span class="keyword">for</span> item <span class="keyword">in</span> get_all_styles()])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snippet</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    owner = models.ForeignKey(to=<span class="string">'auth.User'</span>, related_name=<span class="string">'snippets'</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>, blank=<span class="keyword">True</span>, default=<span class="string">''</span>)</span><br><span class="line">    code = models.TextField()</span><br><span class="line">    highlighted = models.TextField()</span><br><span class="line">    linenos = models.BooleanField(default=<span class="keyword">False</span>)</span><br><span class="line">    language = models.CharField(choices=LANGUAGE_CHOICE, default=<span class="string">'python'</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    style = models.CharField(choices=STYLE_CHOICE, default=<span class="string">'friendly'</span>, max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        使用pygments来创建高亮代码</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> get_lexer_by_name</span><br><span class="line">        <span class="keyword">from</span> pygments.formatters.html <span class="keyword">import</span> HtmlFormatter</span><br><span class="line">        <span class="keyword">from</span> pygments <span class="keyword">import</span> highlight</span><br><span class="line">        lexer = get_lexer_by_name(self.language)</span><br><span class="line">        linenos = self.linenos <span class="keyword">and</span> <span class="string">'table'</span> <span class="keyword">or</span> <span class="keyword">False</span></span><br><span class="line">        options = self.title <span class="keyword">and</span> &#123;<span class="string">'title'</span>: self.title&#125; <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">        formatter = HtmlFormatter(style=self.style, linenos=linenos, full=<span class="keyword">True</span>, **options)</span><br><span class="line">        self.highlighted = highlight(self.code, lexer, formatter)</span><br><span class="line">        super(Snippet, self).save(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = (<span class="string">'created'</span>,)</span><br></pre></td></tr></table></figure></p><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><p>snippets/serializers.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> LANGUAGE_CHOICE, STYLE_CHOICE, Snippet</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetModelSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class="line">    owner = serializers.ReadOnlyField(source=<span class="string">'owner.username'</span>)</span><br><span class="line">    highlight = serializers.HyperlinkedIdentityField(view_name=<span class="string">'snippet-highlight'</span>, format=<span class="string">'html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Snippet</span><br><span class="line">        fields = (<span class="string">'url'</span>, <span class="string">'owner'</span>, <span class="string">'highlight'</span>, <span class="string">'title'</span>, <span class="string">'code'</span>, <span class="string">'linenos'</span>, <span class="string">'language'</span>, <span class="string">'style'</span>)</span><br></pre></td></tr></table></figure></p><h4 id="认证和权限"><a href="#认证和权限" class="headerlink" title="认证和权限"></a>认证和权限</h4><p>snippets/permissions.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:UTF-8</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsOwnerOrReadOnly</span><span class="params">(permissions.BasePermission)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    自定义权限，只有创建者才能编辑，其他用户只能查看</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permission</span><span class="params">(self, request, view, obj)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.method <span class="keyword">in</span> permissions.SAFE_METHODS:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj.owner == request.user</span><br></pre></td></tr></table></figure></p><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><p>snippets/views.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> detail_route</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions, viewsets</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> serializers <span class="keyword">import</span> SnippetModelSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    提供list,create,retrieve,update,destory</span></span><br><span class="line"><span class="string">    额外添加highlight</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">from</span> snippets.permissions <span class="keyword">import</span> IsOwnerOrReadOnly</span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetModelSerializer</span><br><span class="line">    permission_classes = (permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span><span class="params">(self, serializer)</span>:</span></span><br><span class="line">        serializer.save(owner=self.request.user)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @detail_route(renderer_classes=[renderers.StaticHTMLRenderer])</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">highlight</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        snippet = self.get_object()</span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br></pre></td></tr></table></figure></p><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>urls.py模块中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line">router = routers.DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'userlist'</span>,views.UserViewSet)</span><br><span class="line">router.register(<span class="string">r'snippets'</span>,views.SnippetViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^api/'</span>, include(router.urls)),</span><br><span class="line">    url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><img src="http://7xosur.com1.z0.glb.clouddn.com//image/blog/REST.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;配置要求&quot;&gt;&lt;a href=&quot;#配置要求&quot; class=&quot;headerlink&quot; title=&quot;配置要求&quot;&gt;&lt;/a&gt;配置要求&lt;/h3&gt;&lt;p&gt;REST framework有以下要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python(2.7,3.2,3.3,3.4,3.5)&lt;/li&gt;
&lt;li&gt;Django(1.7+,1.8,1.9)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可选的包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Markdown(2.1.0+) -为可视化API提供支持&lt;/li&gt;
&lt;li&gt;django-filter(0.9.2+)-过滤支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install djangorestframework&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install markdown&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install django-filter&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone git@github.com:tomchristie/django-rest-framework.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;注册APP&quot;&gt;&lt;a href=&quot;#注册APP&quot; class=&quot;headerlink&quot; title=&quot;注册APP&quot;&gt;&lt;/a&gt;注册APP&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;INSTALLED_APPS=(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;apos;snippets&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;apos;rest_framework&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;可视化API&quot;&gt;&lt;a href=&quot;#可视化API&quot; class=&quot;headerlink&quot; title=&quot;可视化API&quot;&gt;&lt;/a&gt;可视化API&lt;/h3&gt;&lt;p&gt;添加REST framework的登录/登出视图。在根urls.py文件中添加：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;urlpatterns = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url(r&amp;apos;/api-auth&amp;apos;,include(&amp;apos;rest_framework.urls&amp;apos;,namespace=&amp;apos;rest_framework&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;setting.py模块中：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;REST_FRAMEWORK = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 使用Django的标准`django.contrib.auth`权限管理类,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 或者为尚未认证的用户，赋予只读权限.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;apos;DEFAULT_PERMISSION_CLASSES&amp;apos;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;apos;rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="http://zongan.live/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="REST_API" scheme="http://zongan.live/categories/%E5%90%8E%E7%AB%AF/REST-API/"/>
    
    
      <category term="tech" scheme="http://zongan.live/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>Django框架</title>
    <link href="http://zongan.live/2018/08/17/Django%E6%A1%86%E6%9E%B6/"/>
    <id>http://zongan.live/2018/08/17/Django框架/</id>
    <published>2018-08-17T06:08:57.581Z</published>
    <updated>2018-08-17T06:08:57.581Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Python的web框架有Django、Tornado、Flask等多种<br>Django的优势：ORM、模型绑定、模版引擎、缓存、Session</p></blockquote><h2 id="框架知识点："><a href="#框架知识点：" class="headerlink" title="框架知识点："></a><strong>框架知识点：</strong></h2><ul><li style="list-style: none"><input type="checkbox"> 流程</li><li style="list-style: none"><input type="checkbox"> 基本配置</li><li style="list-style: none"><input type="checkbox"> 路由系统</li><li style="list-style: none"><input type="checkbox"> 视图view</li><li style="list-style: none"><input type="checkbox"> 模版</li><li style="list-style: none"><input type="checkbox"> Model模型</li><li style="list-style: none"><input type="checkbox"> 中间件</li><li style="list-style: none"><input type="checkbox"> Form</li><li style="list-style: none"><input type="checkbox"> 认证系统</li><li style="list-style: none"><input type="checkbox"> CSRF</li><li style="list-style: none"><input type="checkbox"> 分页</li><li style="list-style: none"><input type="checkbox"> Cookie</li><li style="list-style: none"><input type="checkbox"> Session</li><li style="list-style: none"><input type="checkbox"> 缓存</li><li style="list-style: none"><input type="checkbox"> 序列化</li><li style="list-style: none"><input type="checkbox"> 信号</li><li style="list-style: none"><input type="checkbox"> admin</li><li style="list-style: none"><input type="checkbox"> 事务（Transaction）</li><li style="list-style: none"><input type="checkbox"> 装饰器</li><li style="list-style: none"><input type="checkbox"> 模块</li><li style="list-style: none"><input type="checkbox"> Q</li></ul><a id="more"></a><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><ul><li>函数装饰器</li><li>类装饰器</li></ul><h3 id="函数装饰器"><a href="#函数装饰器" class="headerlink" title="函数装饰器"></a>函数装饰器</h3><blockquote><p>装饰器本身也是一个函数，它的作用是在不改动其他函数代码的前提下为其增加额外的功能，装饰器的返回值也是一个函数。</p></blockquote><ul><li>带参数的装饰器</li><li>不带参数的装饰器</li></ul><h4 id="不带参数的装饰器"><a href="#不带参数的装饰器" class="headerlink" title="不带参数的装饰器"></a>不带参数的装饰器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def foo():</span><br><span class="line">    print &apos;i am foo&apos;</span><br></pre></td></tr></table></figure><p>需求：要记录foo的执行日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def foo():</span><br><span class="line">    print &apos;i am foo&apos;</span><br><span class="line">    log.info(&apos;foo is running&apos;)</span><br></pre></td></tr></table></figure></p><p>一个函数有这个需求还好办，如果有10个函数都需要记录日志，这样写不仅费事，而且很不优雅。<br>改进：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def add_logging(func):</span><br><span class="line">    func()</span><br><span class="line">    log.info(&apos;foo is running&apos;)</span><br><span class="line"></span><br><span class="line">add_logging(foo)</span><br></pre></td></tr></table></figure></p><p>这样是可以，但是改变了原来的逻辑，原先执行foo()变成了执行add_logging(foo)<br>为了让代码更优雅，装饰器诞生了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">简单的装饰器:</span><br><span class="line"></span><br><span class="line">def add_logging(func):</span><br><span class="line">    def _func(*args,**kws):</span><br><span class="line">        log.info(func.__name__ + &apos; is running&apos;)</span><br><span class="line">        return func</span><br><span class="line">    return _func</span><br><span class="line"></span><br><span class="line">def foo():</span><br><span class="line">    print &apos;i am foo&apos;</span><br><span class="line"></span><br><span class="line">foo = add_logging(foo)</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></p><p>每次都要进行foo = add_logging(foo)的赋值操作，会显得麻烦。<br>装饰器的语法糖@符号，在定义函数的时候使用，避免再次赋值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@add_logging</span><br><span class="line">def foo():</span><br><span class="line">    print &apos;i am foo&apos;</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></p><h4 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h4><p>在上面的例子中，装饰器的唯一参数就是执行业务的函数。装饰器语法允许我们在调用时，提供其他参数。这样就为装饰器的编写提供了更大的灵活性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def add_logging(level):</span><br><span class="line">    def _func(func):</span><br><span class="line">        def __func(*args,**kws):</span><br><span class="line">            log.info(func.__name__ + &apos; is running&apos;)</span><br><span class="line">            return func</span><br><span class="line">        return __func</span><br><span class="line">    return _func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@add_logging(level=&apos;1&apos;)</span><br><span class="line">def foo():</span><br><span class="line">    print &apos;i am foo&apos;</span><br></pre></td></tr></table></figure></p><hr><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul><li>inspect</li></ul><h3 id="inspect"><a href="#inspect" class="headerlink" title="inspect"></a>inspect</h3><ol><li>对是否是模块，框架，函数等进行类型检查。</li><li>获取源码</li><li>==获取类或函数的参数的信息==</li><li>解析堆栈</li></ol><hr><h2 id="数据库事务Database-transactions"><a href="#数据库事务Database-transactions" class="headerlink" title="数据库事务Database transactions"></a>数据库事务<a href="https://docs.djangoproject.com/en/1.11/topics/db/transactions/" target="_blank" rel="noopener">Database transactions</a></h2><p>数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。 事务处理可以确保除非事务性单元内的所有操作都成功完成，否则不会永久更新面向数据的资源。通过将一组相关操作组合为一个要么全部成功要么全部失败的单元，可以简化错误恢复并使应用程序更加可靠。一个逻辑工作单元要成为事务，必须满足所谓的ACID（原子性、一致性、隔离性和持久性）属性。事务是数据库运行中的逻辑工作单位，由DBMS中的事务管理子系统负责事务的处理。</p><h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><p>设想网上购物的一次交易，其付款过程至少包括以下几步数据库操作：<br>一、更新客户所购商品的库存信息<br>二、保存客户付款信息–可能包括与银行系统的交互<br>三、生成订单并且保存到数据库中<br>四、更新用户相关信息，例如购物数量等等<br>正常的情况下，这些操作将顺利进行，最终交易成功，与交易相关的所有数据库信息也成功地更新。但是，如果在这一系列过程中任何一个环节出了差错，例如在更新商品库存信息时发生异常、该顾客银行帐户存款不足等，都将导致交易失败。一旦交易失败，数据库中所有信息都必须保持交易前的状态不变，比如最后一步更新用户信息时失败而导致交易失败，那么必须保证这笔失败的交易不影响数据库的状态–库存信息没有被更新、用户也没有付款，订单也没有生成。否则，数据库的信息将会一片混乱而不可预测。<br>数据库事务正是用来保证这种情况下交易的平稳性和可预测性的技术。</p><h4 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from django.db import transaction</span><br><span class="line"></span><br><span class="line">with transaction.atomic():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><hr><h2 id="django定时任务-unix环境"><a href="#django定时任务-unix环境" class="headerlink" title="django定时任务(unix环境)"></a>django定时任务(unix环境)</h2><p><a href="https://pypi.python.org/pypi/django-crontab" target="_blank" rel="noopener">传送门</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-crontab</span><br></pre></td></tr></table></figure></p><p>settings.py配置：<br>INSTALLED_APPS添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;django_crontab&apos;</span><br></pre></td></tr></table></figure></p><p>同样在settings文件中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CRONJOBS=[</span><br><span class="line">    (&apos;*/10 * * * *&apos;,&apos;app.cron.checkOrderToCancel&apos;,[],&#123;&#125;,&apos;&apos;)</span><br><span class="line">]   </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">app应用中新建文件cron.py:</span><br></pre></td></tr></table></figure></p><p>def checkOrderToCancel():<br>    pass<br>```</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Python的web框架有Django、Tornado、Flask等多种&lt;br&gt;Django的优势：ORM、模型绑定、模版引擎、缓存、Session&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;框架知识点：&quot;&gt;&lt;a href=&quot;#框架知识点：&quot; class=&quot;headerlink&quot; title=&quot;框架知识点：&quot;&gt;&lt;/a&gt;&lt;strong&gt;框架知识点：&lt;/strong&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; 流程&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; 基本配置&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; 路由系统&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; 视图view&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; 模版&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; Model模型&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; 中间件&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; Form&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; 认证系统&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; CSRF&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; 分页&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; Cookie&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; Session&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; 缓存&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; 序列化&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; 信号&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; admin&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; 事务（Transaction）&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; 装饰器&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; 模块&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; Q&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="后端" scheme="http://zongan.live/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="web框架" scheme="http://zongan.live/categories/%E5%90%8E%E7%AB%AF/web%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="tech" scheme="http://zongan.live/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>npm</title>
    <link href="http://zongan.live/2018/08/15/npm/"/>
    <id>http://zongan.live/2018/08/15/npm/</id>
    <published>2018-08-15T06:03:40.000Z</published>
    <updated>2018-08-17T06:08:57.586Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ npm init      <span class="comment">//  生成package.json</span></span><br><span class="line">$ npm adduser   <span class="comment">// npm资源库中注册用户</span></span><br><span class="line">Username: user1</span><br><span class="line">Password:</span><br><span class="line">Email:</span><br><span class="line"></span><br><span class="line">$ npm publish   <span class="comment">// 发布模块</span></span><br><span class="line">$ npm install &lt;package&gt;         <span class="comment">//安装包</span></span><br><span class="line">$ npm install &lt;package&gt;  -g     <span class="comment">//全局安装</span></span><br><span class="line">$ npm update  &lt;package&gt;         <span class="comment">//更新包</span></span><br><span class="line">$ npm uninstall &lt;package&gt;       <span class="comment">//卸载包</span></span><br><span class="line">$ npm cache clear               <span class="comment">//清空NPM本地缓存</span></span><br><span class="line">$ npm unpublish &lt;package&gt;@&lt;version&gt; <span class="comment">//可以撤销发布已经发布过的某个版本代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line">$ cnpm install &lt;package&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="npm" scheme="http://zongan.live/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="http://zongan.live/2018/08/15/Nodejs/"/>
    <id>http://zongan.live/2018/08/15/Nodejs/</id>
    <published>2018-08-15T05:35:44.000Z</published>
    <updated>2018-08-17T09:33:24.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="交互式解释器"><a href="#交互式解释器" class="headerlink" title="交互式解释器"></a>交互式解释器</h1><p>下划线变量（_）,可以使用下划线获取上一个表达式的运算结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line">&gt; <span class="keyword">var</span> y = <span class="number">20</span></span><br><span class="line">&gt;  x + y</span><br><span class="line">&gt;  <span class="keyword">var</span> sum = _</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(sum)</span><br><span class="line"><span class="number">30</span>_</span><br></pre></td></tr></table></figure></p><h2 id="REPL命令"><a href="#REPL命令" class="headerlink" title="REPL命令"></a>REPL命令</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ctrl+c              <span class="comment">//退出当前终端</span></span><br><span class="line">ctrl+c 按下两次      <span class="comment">//退出Node REPL</span></span><br><span class="line">ctrl+d              <span class="comment">//退出Node REPL</span></span><br><span class="line">.help               <span class="comment">//列出使用命令</span></span><br><span class="line">.break              <span class="comment">//退出多行表达式</span></span><br><span class="line">.clear              <span class="comment">//退出多行表达式</span></span><br><span class="line">.save &lt;filename&gt;      <span class="comment">//保存当前的Node REPL会话到指定文件</span></span><br><span class="line">.load &lt;filename&gt;      <span class="comment">//载入当前的Node REPL会话的文件内容</span></span><br></pre></td></tr></table></figure><hr><h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><p>Node.js异步编程的直接体现就是回调。<br>回调函数接收错误对象作为第一个参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ touch input.txt</span><br><span class="line">$ nano input.txt</span><br><span class="line">hello nodejs</span><br></pre></td></tr></table></figure></p><h2 id="阻塞代码实例"><a href="#阻塞代码实例" class="headerlink" title="阻塞代码实例"></a>阻塞代码实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'input.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'程序执行结束'</span>);</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello nodejs</span><br><span class="line">程序执行结束</span><br></pre></td></tr></table></figure></p><p>程序顺序执行，读取文件阻塞</p><h2 id="非阻塞代码实例"><a href="#非阻塞代码实例" class="headerlink" title="非阻塞代码实例"></a>非阻塞代码实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">'input.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)<span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'程序执行结束'</span>);</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">程序执行结束</span><br><span class="line">hello nodejs</span><br></pre></td></tr></table></figure></p><p>程序异步执行，文件读取完成后调用回调函数；后面的程序不会被阻塞。</p><hr><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入events模块</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="comment">//创建eventEmitter对象</span></span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接事件处理程序</span></span><br><span class="line"><span class="keyword">var</span> connectHandler = <span class="function"><span class="keyword">function</span> <span class="title">connected</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'连接成功.'</span>);</span><br><span class="line">    <span class="comment">//触发接收数据事件</span></span><br><span class="line">    eventEmitter.emit(<span class="string">'data_received'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绑定connection事件处理程序</span></span><br><span class="line">eventEmitter.on(<span class="string">'connection'</span>,connectHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定接收数据事件</span></span><br><span class="line">eventEmitter.on(<span class="string">'data_received'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据接收成功.'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发连接事件</span></span><br><span class="line">eventEmitter.emit(<span class="string">'connection'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'程序执行完毕.'</span>);</span><br></pre></td></tr></table></figure><h2 id="EventEmitter类"><a href="#EventEmitter类" class="headerlink" title="EventEmitter类"></a>EventEmitter类</h2><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><h4 id="addListener-event-listener"><a href="#addListener-event-listener" class="headerlink" title="addListener(event,listener)"></a>addListener(event,listener)</h4><p>为指定事件添加一个监听器到监听器数组的尾部</p><h4 id="on-event-listener"><a href="#on-event-listener" class="headerlink" title="on(event,listener)"></a>on(event,listener)</h4><p>为指定事件注册一个监听器，接收一个字符串event和一个回调函数。</p><h4 id="once-event-listener"><a href="#once-event-listener" class="headerlink" title="once(event,listener)"></a>once(event,listener)</h4><p>为指定事件注册一个单次监听器，即监听器最多只会触发一次，触发后立刻解除该监听器。</p><h4 id="removeListener-event-listener"><a href="#removeListener-event-listener" class="headerlink" title="removeListener(event,listener)"></a>removeListener(event,listener)</h4><p>移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。</p><h4 id="removeAllListeners-event"><a href="#removeAllListeners-event" class="headerlink" title="removeAllListeners([event])"></a>removeAllListeners([event])</h4><p>移除所有事件的监听器，如果指定事件，则移除指定事件的所有监听器。</p><h4 id="setMaxListeners-n"><a href="#setMaxListeners-n" class="headerlink" title="setMaxListeners(n)"></a>setMaxListeners(n)</h4><p>设置事件默认（10）允许的最大监听器数量。</p><h4 id="listeners-event"><a href="#listeners-event" class="headerlink" title="listeners(event)"></a>listeners(event)</h4><p>返回指定事件的监听器数组。</p><h4 id="emit-event-arg1-arg2-…"><a href="#emit-event-arg1-arg2-…" class="headerlink" title="emit(event,[arg1],[arg2],[…])"></a>emit(event,[arg1],[arg2],[…])</h4><p>按照参数的顺序执行每个监听器，如果事件又注册监听器返回true，否则返回false。</p><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><h4 id="listenerCount-emitter-event"><a href="#listenerCount-emitter-event" class="headerlink" title="listenerCount(emitter,event)"></a>listenerCount(emitter,event)</h4><p>返回指定事件的监听器数量。</p><h3 id="实例事件"><a href="#实例事件" class="headerlink" title="实例事件"></a>实例事件</h3><h4 id="newListener"><a href="#newListener" class="headerlink" title="newListener"></a>newListener</h4><p>该事件在添加新监听器时被触发</p><ul><li>event      字符串，事件名称</li><li>listener   处理事件函数</li></ul><h4 id="removeListener"><a href="#removeListener" class="headerlink" title="removeListener"></a>removeListener</h4><p>从指定监听器数组中删除一个监听器，此操作将会改变处于被删监听器后的那些监听器的索引。</p><ul><li>event     字符串，事件名称</li><li>listener  处理事件函数</li></ul><h3 id="error事件"><a href="#error事件" class="headerlink" title="error事件"></a>error事件</h3><p>EventEmitter类定义了一个特殊的事件error，包含了错误的语意。<br>当error被触发时，如果没有响应的监听器，Node.js会把它当作异常，退出程序并输出错误信息。<br>一般情况下需要为会触发error 事件的对象设置监听器，避免遇到错误后整个程序崩溃。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="keyword">var</span> emitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line">emitter.emit(<span class="string">'error'</span>);</span><br></pre></td></tr></table></figure></p><h3 id="继承EventEmitter"><a href="#继承EventEmitter" class="headerlink" title="继承EventEmitter"></a>继承EventEmitter</h3><p>大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。<br>为什么要这样做呢？原因有两点：</p><ul><li>具有某个实体功能的对象实现事件符合语义， 事件的监听和发生应该是一个对象的方法。</li><li>JavaScript 的对象机制是基于原型的，支持 部分多重继承，继承 EventEmitter 不会打乱对象原有的继承关系。</li></ul><hr><h1 id="Node-js-Buffer（缓冲区）"><a href="#Node-js-Buffer（缓冲区）" class="headerlink" title="Node.js Buffer（缓冲区）"></a>Node.js Buffer（缓冲区）</h1><blockquote><p>在v6.0之前创建Buffer对象直接使用new Buffer()构造函数来创建对象实例，但是Buffer对内存的权限操作相比很大，可以直接捕获一些敏感信息，所以在v6.0以后，官方文档里面建议使用 Buffer.from() 接口去创建Buffer对象。</p></blockquote><h2 id="创建Buffer类"><a href="#创建Buffer类" class="headerlink" title="创建Buffer类"></a>创建Buffer类</h2><p>Buffer 提供了以下 API 来创建 Buffer 类：</p><ul><li>Buffer.alloc(size[, fill[, encoding]])： 返回一个指定大小的 Buffer 实例，如果没有设置 fill，则默认填满 0</li><li>Buffer.allocUnsafe(size)： 返回一个指定大小的 Buffer 实例，但是它不会被初始化，所以它可能包含敏感的数据</li><li>Buffer.allocUnsafeSlow(size)</li><li>Buffer.from(array)： 返回一个被 array 的值初始化的新的 Buffer 实例（传入的 array 的元素只能是数字，不然就会自动被 0 覆盖）</li><li>Buffer.from(arrayBuffer[, byteOffset[, length]])： 返回一个新建的与给定的 ArrayBuffer 共享同一内存的 Buffer。</li><li>Buffer.from(buffer)： 复制传入的 Buffer 实例的数据，并返回一个新的 Buffer 实例</li><li>Buffer.from(string[, encoding])： 返回一个被 string 的值初始化的新的 Buffer 实例</li></ul><h2 id="写入缓冲区"><a href="#写入缓冲区" class="headerlink" title="写入缓冲区"></a>写入缓冲区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buf.write(string[,offset[,length]][,encoding])</span><br><span class="line">返回值：返回实际写入的大小，如果buffer空间不足，则只会写入部分字符。</span><br></pre></td></tr></table></figure><h2 id="从缓冲区读取数据"><a href="#从缓冲区读取数据" class="headerlink" title="从缓冲区读取数据"></a>从缓冲区读取数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.toString([encoding[,start[,end]]])</span><br></pre></td></tr></table></figure><p>返回值：解码缓冲区数据并使用指定的编码返回字符串。</p><h2 id="将Buffer转换为JSON对象"><a href="#将Buffer转换为JSON对象" class="headerlink" title="将Buffer转换为JSON对象"></a>将Buffer转换为JSON对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.toJSON()</span><br></pre></td></tr></table></figure><p>返回值：返回JSON对象</p><h2 id="缓冲区合并"><a href="#缓冲区合并" class="headerlink" title="缓冲区合并"></a>缓冲区合并</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Buffer.concat(list[,totalLength])</span><br><span class="line">参数：</span><br><span class="line">    - list 用户合并的Buffer对象数组列表</span><br><span class="line">    - totalLength 指定合并后Buffer对象的总长度</span><br></pre></td></tr></table></figure><h2 id="缓冲区比较"><a href="#缓冲区比较" class="headerlink" title="缓冲区比较"></a>缓冲区比较</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.compare(otherBuffer);</span><br></pre></td></tr></table></figure><h2 id="拷贝缓冲区"><a href="#拷贝缓冲区" class="headerlink" title="拷贝缓冲区"></a>拷贝缓冲区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buf.copy(targetBuffer[,targetStart[,sourceStart[,sourceEnd]]])</span><br><span class="line">参数：</span><br><span class="line">  - targetBuffer - 要拷贝的 Buffer 对象。</span><br><span class="line">  - targetStart - 数字, 可选, 默认: 0</span><br><span class="line">  - sourceStart - 数字, 可选, 默认: 0</span><br><span class="line">  - sourceEnd - 数字, 可选, 默认: buffer.length</span><br></pre></td></tr></table></figure><h2 id="缓冲区裁剪"><a href="#缓冲区裁剪" class="headerlink" title="缓冲区裁剪"></a>缓冲区裁剪</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.slice([start[,end])</span><br></pre></td></tr></table></figure><h2 id="缓冲区长度"><a href="#缓冲区长度" class="headerlink" title="缓冲区长度"></a>缓冲区长度</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.length;</span><br></pre></td></tr></table></figure><hr><h1 id="Node-js-Stream-流"><a href="#Node-js-Stream-流" class="headerlink" title="Node.js Stream 流"></a>Node.js Stream 流</h1><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><p>四种流类型：</p><ul><li>Readable - 可读操作。</li><li>Writable - 可写操作。</li><li>Duplex - 可读可写操作.</li><li>Transform - 操作被写入数据，然后读出结果。</li></ul><p>所有的Stream对象都是EventEmitter的实例。常用的事件有：</p><ul><li>data - 当有数据可读时触发。</li><li>end - 没有更多的数据可读时触发。</li><li>error - 在接收和写入过程中发生错误时触发。</li><li>finish - 所有数据已被写入到底层系统时触发。</li></ul><h3 id="从流中读取数据"><a href="#从流中读取数据" class="headerlink" title="从流中读取数据"></a>从流中读取数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">var</span> readerStream = fs.createReadStream(<span class="string">'input.txt'</span>);</span><br><span class="line">readerStream.setEncoding(<span class="string">'UTF8'</span>);</span><br><span class="line">readerStream.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">        data+=chunk;</span><br><span class="line">&#125;)</span><br><span class="line">readerStream.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line">readerStream.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err.stack);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'programing is end.'</span>);</span><br></pre></td></tr></table></figure><h3 id="写入流"><a href="#写入流" class="headerlink" title="写入流"></a>写入流</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">'hello nodejs,i am stream.'</span>;</span><br><span class="line"><span class="keyword">var</span> writeStream = fs.createWriteStream(<span class="string">'output.txt'</span>);</span><br><span class="line">writeStream.write(data,<span class="string">'UTF8'</span>);</span><br><span class="line">writeStream.end();</span><br><span class="line">writeStream.on(<span class="string">'finish'</span>,()=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'write finished.'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">writeStream.on(<span class="string">'error'</span>,(err)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err.stack);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'programing end.'</span>);</span><br></pre></td></tr></table></figure><h2 id="管道-pipe"><a href="#管道-pipe" class="headerlink" title="管道(pipe)"></a>管道(pipe)</h2><p>实现大文件的复制。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> readerStream = fs.createReadStream(<span class="string">'input.txt'</span>);</span><br><span class="line"><span class="keyword">var</span> writeStream = fs.createWriteStream(<span class="string">'output.txt'</span>);</span><br><span class="line"><span class="comment">//管道操作</span></span><br><span class="line">readerStream.pipe(writeStream);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'program end.'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="链式流"><a href="#链式流" class="headerlink" title="链式流"></a>链式流</h2><p>链式是通过连接输出流到另外一个流并创建多个流操作链的机制。链式流一般用于管道操作。<br>接下来我们就是用管道和链式来压缩和解压文件。<br>压缩文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>);</span><br><span class="line"><span class="keyword">var</span> readerStream = fs.createReadStream(<span class="string">'input.txt'</span>);</span><br><span class="line"><span class="keyword">var</span> writeStream = fs.createWriteStream(<span class="string">'input.txt.gz'</span>);</span><br><span class="line">readerStream.pipe(zlib.createGzip()).pipe(writeStream);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'program end.'</span>);</span><br></pre></td></tr></table></figure></p><p>解压文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>);</span><br><span class="line"><span class="keyword">var</span> readerStream = fs.createReadStream(<span class="string">'input.txt.gz'</span>);</span><br><span class="line"><span class="keyword">var</span> writeStream = fs.createWriteStream(<span class="string">'input1.txt'</span>);</span><br><span class="line">readerStream.pipe(zlib.createGunzip()).pipe(writeStream);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'program end.'</span>);</span><br></pre></td></tr></table></figure></p><hr><h1 id="Node-js-路由"><a href="#Node-js-路由" class="headerlink" title="Node.js 路由"></a>Node.js 路由</h1><p><code>server.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">var</span> start = <span class="function"><span class="keyword">function</span>(<span class="params">route</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> onRequest = <span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">    route(pathname);</span><br><span class="line">  &#125;</span><br><span class="line">  http.createServer(onRequest).listen(PORT);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Server start http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">exports.start = start;</span><br></pre></td></tr></table></figure></p><p><code>router.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> route = <span class="function"><span class="keyword">function</span>(<span class="params">pathname</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pathname);</span><br><span class="line">&#125;</span><br><span class="line">exports.route = route;</span><br></pre></td></tr></table></figure></p><p><code>index.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'./server'</span>);</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>);</span><br><span class="line">server.start(router.route);</span><br></pre></td></tr></table></figure></p><hr><h1 id="Node-js-Express-框架"><a href="#Node-js-Express-框架" class="headerlink" title="Node.js Express 框架"></a>Node.js Express 框架</h1><hr><h1 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h1><h2 id="模块系统的加载优先级"><a href="#模块系统的加载优先级" class="headerlink" title="模块系统的加载优先级"></a>模块系统的加载优先级</h2><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/nodejs-require.jpg" alt="模块系统的加载优先级"></p><h2 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install http</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入required模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="comment">//创建服务器，接收请求与响应请求</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//发送HTTP头部</span></span><br><span class="line">    <span class="comment">//HTTP状态值：200   ：OK</span></span><br><span class="line">    <span class="comment">//内容类型：text/plain</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送响应数据</span></span><br><span class="line">    response.end(<span class="string">'Hello World\n'</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><h2 id="web框架模块express"><a href="#web框架模块express" class="headerlink" title="web框架模块express"></a>web框架模块express</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express       <span class="comment">//全局安装</span></span><br><span class="line"><span class="comment">//  安装失败</span></span><br><span class="line">npm err! <span class="built_in">Error</span>: connect ECONNREFUSED <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8087</span></span><br><span class="line"><span class="comment">//  解决办法</span></span><br><span class="line">$ npm config set proxy <span class="literal">null</span></span><br><span class="line"><span class="comment">//  卸载模块</span></span><br><span class="line">$ npm uninstall express</span><br><span class="line"><span class="comment">//  更新模块</span></span><br><span class="line">$ npm update express</span><br><span class="line"><span class="comment">//  搜索模块</span></span><br><span class="line">$ npm search express</span><br></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;交互式解释器&quot;&gt;&lt;a href=&quot;#交互式解释器&quot; class=&quot;headerlink&quot; title=&quot;交互式解释器&quot;&gt;&lt;/a&gt;交互式解释器&lt;/h1&gt;&lt;p&gt;下划线变量（_）,可以使用下划线获取上一个表达式的运算结果&lt;br&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://zongan.live/tags/Node-js/"/>
    
      <category term="javascript" scheme="http://zongan.live/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客框架</title>
    <link href="http://zongan.live/2018/08/15/Hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/"/>
    <id>http://zongan.live/2018/08/15/Hexo博客框架/</id>
    <published>2018-08-15T03:30:26.000Z</published>
    <updated>2018-08-17T06:08:57.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h1 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h1><p>如果没有设置<code>layout</code>的话，默认使用<code>_config.yml</code>中的<code>default_layout</code>参数代替。如果标题包含空格，需使用引号括起来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p><h1 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">参数</span><br><span class="line">    -d, --deploy    文件生成后立即部署网站</span><br><span class="line">    -w, --watch     监视文件变动</span><br></pre></td></tr></table></figure><p>该命令可以简写为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></p><h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><h1 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">默认情况下，访问网址为：`http://localhost:4000/`</span><br><span class="line">参数</span><br><span class="line">    -p, --port      重设端口</span><br><span class="line">    -s, --static    只使用静态文件</span><br><span class="line">    -l, --log       启动日记记录，使用覆盖记录格式</span><br></pre></td></tr></table></figure><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">参数</span><br><span class="line">    -g, --generate      部署之前预先生成静态文件</span><br></pre></td></tr></table></figure><p>简写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><h1 id="渲染文件"><a href="#渲染文件" class="headerlink" title="渲染文件"></a>渲染文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo render &lt;files&gt;[file2]...</span><br><span class="line">参数</span><br><span class="line">    -o,--output     设置输出路径</span><br></pre></td></tr></table></figure><h1 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure><h1 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h1 id="列出网站资料"><a href="#列出网站资料" class="headerlink" title="列出网站资料"></a>列出网站资料</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure><h1 id="显示Hexo版本"><a href="#显示Hexo版本" class="headerlink" title="显示Hexo版本"></a>显示Hexo版本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure><h1 id="使用主题next"><a href="#使用主题next" class="headerlink" title="使用主题next"></a>使用主题next</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
      <category term="框架" scheme="http://zongan.live/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Hexo" scheme="http://zongan.live/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>中国佛教发展简史略述——南怀瑾</title>
    <link href="http://zongan.live/2016/09/01/%E4%B8%AD%E5%9B%BD%E4%BD%9B%E6%95%99%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2%E7%95%A5%E8%BF%B0%E2%80%94%E2%80%94%E5%8D%97%E6%80%80%E7%91%BE/"/>
    <id>http://zongan.live/2016/09/01/中国佛教发展简史略述——南怀瑾/</id>
    <published>2016-08-31T16:38:21.000Z</published>
    <updated>2018-08-17T06:08:57.588Z</updated>
    
    <content type="html"><![CDATA[<font size="3">南怀瑾：1918-2012年，从军、经商、游历、考察、讲学。毕生致力于民族振兴和改善社会人心，于中华传统文化之儒、道、佛皆有造诣。</font><font size="3"><strong>法不孤起</strong></font><font size="3">人世间难以料者是事，善于变化者是人。</font><p>&#160;</p><p><strong>本书思路：</strong></p><p>佛教哲学思想的由来</p><p>教主释迦牟尼的生平</p><p>佛教的传播</p><blockquote><p>空间地区的传播</p><p>时间线的发展  </p></blockquote><p>四大文明古国：中国、印度、埃及、希腊。</p><blockquote><p>古希腊文化成就现在的欧美文化，希腊文化代表西方。</p><p>印度文化后历汉季而宋世，已经全盘融汇于中国文化。  </p></blockquote><p>世界文明：宗教——&gt;哲学——&gt;科学</p><a id="more"></a><p>&#160;</p><p><strong><font size="3">佛教前期文化的孕育：</font></strong></p><font size="3">&#160;&#160;&#160;&#160;&#160;&#160; 佛教起源于印度，于两汉时期传入中国。印度位于南亚半岛，地理气候有南北东西及中央地区的明显差别。南印度接近热带，北印靠近喜马拉雅山气候稍冷，中印度为温带气候，古代印度一年只分三季，每季四个月。接近热带，人们的身心动态、思想多于行动，尤其接近南印度地带的，更富于神奇的幻想。当时学派林立，思想学说，各成一方。人文生活，有一特点，就是阶级区分，非常严格，贵贱异等，苦乐悬殊。</font><br>  &gt; <font size="3">印度人的四种姓氏制度：</font><br>&gt;<br>&gt; <font size="3">婆罗门：世袭而职司祭祀的专业僧侣，位居上等，宗教文化教育的中心，凡军国政治，也都为其左右。</font><br>&gt;<br>&gt; <font size="3">刹帝利：王侯武士，集军政权于一族，为世袭的统治者。</font><br>&gt;<br>&gt; <font size="3">吠舍：拥有财货的商贾阶级。</font><br>&gt;<br>&gt; <font size="3">首陀罗：从事耕种的农民阶级。</font><br>&gt;<br>&gt; <font size="3"></font>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; 婆罗门掌管文化教育，依据《四吠陀典》崇尚“神人”“神我”的思想，形成印度历史文化中心的“婆罗门教”，渐次影响到印度人三种姓的思想意识：婆罗门、刹帝利、吠舍。始终倾向于出世的<font color="#4f81bd"><strong>沙门</strong></font><font color="#000000">（修道人）生活。他们理想的人生历程，分为四个时期：</font></p><ol><li>净行时期：少年时代的教育生活，到达一定年龄（婆罗门：8-16岁，刹帝利：11-20岁，吠舍：12-24岁）出家就学，学习吠陀等学问，经过规定年限期（如：12年、24年、36年或48年等）满学业成就，便可回家还俗。2.  家居时期：壮年时期的生活，可以结婚生子，负责家庭生活，善尽一家之主的责任。3.  林栖时期：中年时期栖隐山林、潜心修道，学习各种禅定思维的方法，以求“神我”的升华。4.  遁世时期：进入衰老的岁月，修行生活告一段落，身心绝对净化，道果业已圆成，从此便遁迹山林，再不参与世事。  &gt; 随着新思潮的鼓荡，刹帝利逐渐不满婆罗门的思想统治，所以才有印度文化中“奥义书”的出现，与婆罗门的传统精神互相抗衡。  &gt; <strong><font size="3">古代印度人的思想渊源和文化背景：</font></strong><blockquote><ol><li><font style="background-color: #ffffff">地理环境和天然气候的特殊性，喜欢醉心思维。</font>2.  <font style="background-color: #ffffff">早已有了根深蒂固的婆罗门教和普及的宗教思想。</font>3.  <font style="background-color: #ffffff">倾向于出世思想，以求净化身心，并以林栖遁世为人生最大的享受。</font>4.  <font style="background-color: #ffffff">思想高原偏向虚幻，脱离现实，中间缺乏人本主义的思想体系，致使阶级划分严格，贵贱等位悬殊，宗教的信仰都不能得到平等自由。</font>    </li></ol><font color="#ff0000">因此，释迦牟尼应运而兴，他以慈悲宏愿，创立佛教，截长补短，存优去劣，应化众生的美善精神，梳理百代的文化传统，破除人家的阶级观念，指示人性的升华成就。</font>  </blockquote></li></ol><p>印度上古文化的宗教哲学：</p><p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; 1、四吠陀典（赞颂）：灵魂不灭，死后回到夜摩天。</p><blockquote><p>&#160;&#160;&#160;&#160;&#160; 《梨俱吠陀》赞颂，以赞颂一切自然力量的功德为主。原人，造化一切的主神。</p><p>&#160;&#160;&#160;&#160;&#160; 《夜柔吠陀》祭祀，为一部献祭的祷词，分作黑、白二本，内文半为颂诗半为散文。</p><p>&#160;&#160;&#160;&#160;&#160; 《娑摩吠陀》歌咏，系一部歌咏集，为<a href="http://baike.baidu.com/view/99586.htm" target="_blank" rel="noopener">婆罗门</a>僧祭酒时所歌唱。</p><p>&#160;&#160;&#160;&#160;&#160; 《阿闼婆吠陀》多属神咒，乃控制神鬼之法。  </p></blockquote><p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; 2、 净行书：原人论加以蜕变，崇奉一个造物主宰的神，梵。加上宗教哲学的因果报应，生死轮回，上天堂，下地狱。</p><blockquote><p>3、奥义书：印度宗教哲学，与知识分子和平民普遍的哲学总汇，上下普及，无论男女老幼，都追求心灵的解脱，灵魂的追究，世界生成等问题。  &gt; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; ①确定梵我不二：形而上的造物主和形而下的自我本是同一个整体，世界万象本根同源。</p><p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 潜在内部的自我分为五藏与四位：</p><p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 四位：①醒位②梦位③熟眠位④死位</p><p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 五藏：①食味所成我 ②生气所成我 ③意识所成我 ④认识所成我 ⑤欢喜所成我</p><p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; ② 大梵化生万象：地、水、火、风、空五大种子，化生卵、胎、热、湿、马、人、象等动植物。</p><p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; ③轮回与解脱：天、地、空三界中轮回三道四生。三道：天道、祖道——人道、兽类和地狱道。四生：胎、卵、湿、化四类生命。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;3&quot;&gt;南怀瑾：1918-2012年，从军、经商、游历、考察、讲学。毕生致力于民族振兴和改善社会人心，于中华传统文化之儒、道、佛皆有造诣。&lt;/font&gt;

&lt;font size=&quot;3&quot;&gt;&lt;strong&gt;法不孤起&lt;/strong&gt;&lt;/font&gt;

&lt;font size=&quot;3&quot;&gt;人世间难以料者是事，善于变化者是人。&lt;/font&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本书思路：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;佛教哲学思想的由来&lt;/p&gt;
&lt;p&gt;教主释迦牟尼的生平&lt;/p&gt;
&lt;p&gt;佛教的传播&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;空间地区的传播&lt;/p&gt;
&lt;p&gt;时间线的发展  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;四大文明古国：中国、印度、埃及、希腊。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;古希腊文化成就现在的欧美文化，希腊文化代表西方。&lt;/p&gt;
&lt;p&gt;印度文化后历汉季而宋世，已经全盘融汇于中国文化。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;世界文明：宗教——&amp;gt;哲学——&amp;gt;科学&lt;/p&gt;
    
    </summary>
    
      <category term="书" scheme="http://zongan.live/categories/%E4%B9%A6/"/>
    
      <category term="读书笔记" scheme="http://zongan.live/categories/%E4%B9%A6/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>html中的ul标签怪胎</title>
    <link href="http://zongan.live/2016/04/20/html%E4%B8%AD%E7%9A%84ul%E6%A0%87%E7%AD%BE%E6%80%AA%E8%83%8E/"/>
    <id>http://zongan.live/2016/04/20/html中的ul标签怪胎/</id>
    <published>2016-04-20T15:34:57.000Z</published>
    <updated>2018-08-17T06:08:57.586Z</updated>
    
    <content type="html"><![CDATA[<div>项目中发现一个问题，情况如下：<br>html代码：<br>&lt;body&gt;<br>&lt;div id=”content”&gt;<br>&lt;ul&gt;<br>&lt;li&gt;1&lt;/li&gt;<br>&lt;li&gt;2&lt;/li&gt;<br>&lt;li&gt;3&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;</div><br><div></div><br><a id="more"></a><br><div>css样式：<br>&lt;style type=”text/css”&gt;<br>*{<br>margin: 0;<br>padding: 0;<br>}<br>#content{<br>background-color: red;<br>width: 300px;<br>margin: 0 auto;<br>padding:0;<br>}<br>#content ul{<br>margin-top: 20px auto;<br>background-color: blue;<br>width: 200px;<br>}<br>#content ul li{<br>color: white;<br>margin: 10px auto;<br>width: 100px;<br>background-color: green;<br>}<br>一个简单的页面，body中div下包含了一个ul，div的margin和padding均为0；ul设置了margin属性为20px，li的margin属性为10px;<br>问题来了：<br>理论上div的上边缘应该和body/页面平齐，ul的margin以div的border-top为基础向下偏移,li的margin以ul的border-top为基础向下偏移.</div><br><div></div><br><div>但事实上并不是，ul的margin和li的margin都是以父容器的border-top向外偏移，如图；</div><br><div><img src="http://zongan0824.com/wp-content/uploads/2016/04/1.png" alt="1"></div><br><div> <img src="http://zongan0824.com/wp-content/uploads/2016/04/2.png" alt="2"></div><br><div></div><br><div>IE/Chrome/FireFox都测试过，这和其他的标签不一样，所以ul也算是html中的一个怪胎。经过一番研究，最终将margin属性用padding来实现，问题得以解决。</div><br><div>#content ul{<br>padding-top: 20px;<br>background-color: blue;<br>width: 200px;<br>}<br>#content ul li{<br>color: white;<br>padding: 10px;<br>width: 100px;<br>background-color: green;<br>}</div><br><div><img src="http://zongan0824.com/wp-content/uploads/2016/04/3.png" alt="3"></div><br><div></div><br><div>注：默认情况下ul有一个margin-left:40px（也有可能是padding）的属性,所以经常会看到ul下的li标签缩进了。</div>]]></content>
    
    <summary type="html">
    
      &lt;div&gt;项目中发现一个问题，情况如下：&lt;br&gt;html代码：&lt;br&gt;&amp;lt;body&amp;gt;&lt;br&gt;&amp;lt;div id=”content”&amp;gt;&lt;br&gt;&amp;lt;ul&amp;gt;&lt;br&gt;&amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt;&lt;br&gt;&amp;lt;li&amp;gt;2&amp;lt;/li&amp;gt;&lt;br&gt;&amp;lt;li&amp;gt;3&amp;lt;/li&amp;gt;&lt;br&gt;&amp;lt;/ul&amp;gt;&lt;br&gt;&amp;lt;/div&amp;gt;&lt;br&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web前端" scheme="http://zongan.live/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="日记" scheme="http://zongan.live/categories/Web%E5%89%8D%E7%AB%AF/%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
